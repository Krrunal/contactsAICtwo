import { ActionSheet, Root } from "native-base";
import {
  Animated,
  Button,
  Dimensions,
  FlatList,
  Image,
  Keyboard,
  LayoutAnimation,
  LogBox,
  Modal,
  Text,
  TextInput,
  TouchableHighlight,
  TouchableOpacity,
  TouchableWithoutFeedback,
  View,
} from "react-native";
import React, { Component } from "react";
import { darkTheme, lightTheme } from "../theme/themeProps";
import styled, { ThemeProvider } from "styled-components/native";

import AsyncStorage from "@react-native-community/async-storage";
import { COLORS } from "../theme/Colors.js";
import { Colors } from "react-native-paper";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import DropDownPicker from "react-native-dropdown-picker";
import Font from "../theme/font";
import GeneralStatusBar from "../../components/StatusBar/index";
import Header from "../../components/header/index";
import Icon from "react-native-vector-icons/Entypo";
import ImagePicker from "react-native-image-crop-picker";
import IntlPhoneInput from "react-native-intl-phone-input";
import Metrics from "../theme/Metrics";
import Swipeable from "react-native-gesture-handler/Swipeable";
import Toast from "react-native-easy-toast";
import { bindActionCreators } from "redux";
import calender from "../../assets/images/calender.png";
import call from "../../assets/images/call.png";
import checked from '../../assets/icons/checked.png'
import { connect } from "react-redux";
import data from "../../../node_modules/react-native-intl-phone-input/src/Countries";
import email from "../../assets/images/email.png";
import { fcmService } from "../../services/FirebaseDatabase/FCMService";
import firebase from "../../services/FirebaseDatabase/db";
import handshake from "../../assets/images/handshake.png";
import home from "../../assets/images/home.png";
import innerimg from "../../assets/images/innerimg.png";
import instagram from "../../assets/images/instagram.png";
import message from "../../assets/images/message.png";
import moment from "moment";
import note from "../../assets/images/note.png";
import style from "../../components/StatusBar/style";
import styles from "./style.js";
import { switchTheme } from "../../action/themeAction";
import { updateMyInfo } from "../../services/FirebaseDatabase/updateMyInfo";
import uuid from "react-native-uuid";
import { values } from "lodash";
import website from "../../assets/images/website.png";

var { width, height } = Dimensions.get("window");
LogBox.ignoreAllLogs();
var DESTRUCTIVE_INDEX = 3;
var CANCEL_INDEX = 4;
var BUTTONS = ["Take Photo", "Choose Photo From Gallery", "Cancel"];
class MyContactInfromation extends Component {
  constructor() {
    super();

    this.state = {
      exaModalOpen:false,
      counter: 0,
      isNumberSection: false,
      isEmailSection: false,
      isVisible: false,
      isVisibleArray: false,
      choosenDate: "",
      choosenDateArray: "",
      first_name: "",
      middle_name: "",
      last_name: "",
      nick_name: "",
      number_1: "",
      number1: {
        number1: "",
        label: "",
      },
      number2: {
        number2: "",
        label: "",
      },
      number3: {
        number3: "",
        label: "",
      },
      value: "",
      email: {
        email: "",
        label: "",
      },
      address: {
        address: "",
        label: "",
      },
      messanger: {
        messanger: "",
        label: "",
      },
      socialMedia: {
        socialMedia: "",
        label: "",
      },
      website: {
        website: "",
        label: "",
      },
      date: {
        date: "",
        label: "",
      },
      note: {
        note: "",
        label: "",
      },
      company: {
        company: "",
        label: "",
        time: "",
      },
      jobTitle: {
        jobTitle: "",
        label: "",
      },
      work_hour:  {
        monday : { first :"", to:"" },
        tuesday : { first :"", to:"" },
        wednesday : { first :"", to:"" },
        thursday : { first :"", to:"" },
        friday : { first :"", to:"" },
        saturday : { first :"", to:"" },
        sunday : { first :"", to:"" },
      },
      work_hourArray : [{
        monday : { first :"", to:"" },
        tuesday : { first :"", to:"" },
        wednesday : { first :"", to:"" },
        thursday : { first :"", to:"" },
        friday : { first :"", to:"" },
        saturday : { first :"", to:"" },
        sunday : { first :"", to:"" },
      }],
      messanger1: "",
      messenger2: "",
      social_media1: "",
      social_media2: "",

      website1: "",
      website2: "",
      dob: "",
      note1: "",
      company1: "",
      job_title: "",

      image: null,
      images: null,
      image2: null,
      image3: null,
      profile_image: "",
      profile_image2: "",
      profile_image3: "",
      numberArray: [],
      emailArray: [],
      mobileArray: "",
      mobileArray2: "",
      mobileLabelArray: [],
      phoneSection: false,
      addressArray: [],
      messangerArray: [],
      socialMediaArray: [],
      websiteArray: [],
      dateArray: [],
      noteArray: [],
      companyArray: [],
      jobTitleArray: [],
      workHoursArray: [],

      disabledNumber: false,
      disabledEmail: false,
      disabledAddress: false,
      disabledMessanger: false,
      disabledSocialMedia: false,
      disableWebsite: false,
      disabledDate: false,
      disabledNote: false,
      disabledCompany: false,
      status: false,
      //inputText
      TextInputDisable: false,
      //mobile modal
      isMobileModelOpen: false,
      isMobileModelOpenArray: false,
      mobileLabelList: [
        { label: "Personal(Mobie)" },
        { label: "Personal(Lanline)" },
        { label: "Work(Mobile)" },
        { label: "Work(Landline)" },
        { label: "Personal Fax" },
        { label: "Work Fax" },
      ],
      textInput: [{ label: "Select Type", show: false }],
       inputData: [],
      mobileLabel: "",
      isAddMobileLabel: false,
      // email modal
      isEmailModelOpen: false,
      emailLabelList: [
        { label: "Personal 1" },
        { label: "Personal 2" },
        { label: "Other" },
      ],
      emailLabel: "",
      isAddEmailLabel: false,
      isEmailArrrayModelOpen: false,
      isAddEmailArrayLabel: false,
      //address modal
      isAddressModelOpen: false,
      addressLabelList: [{ label: "Personal 1" }, { label: "Other" }],
      addressLabel: "",
      isAddAddressLabel: false,
      isAddressArrayModelOpen: false,
      isAddAddressArrayLabel: false,
      //messnger model
      isMessangerModelOpen: false,
      mesangerLabelList: [{ label: "Work" }, { label: "Personal" }],
      messengerLabel: "",
      isAddMessangerLabel: false,
      isMessangerArrayModelOpen: false,
      isAddMessangerArrayLabel: false,
      //social Media
      isSocialMediaModelOpen: false,
      socialMediaLabelList: [
        { label: "Instagram Personal " },
        { label: "Periscop Professional" },
      ],
      socialMediaLabel: "",
      isAddSocialMediaLabel: false,
      isSocialMediaArrayModelOpen: false,
      isSocialMediaModelOpen: false,
      isAddSocialMediaArrayLabel: false,
      //website
      isWebsiteModelOpen: false,
      websiteLableList: [
        { label: " Sport gambling podcast" },
        { label: " Universal Studio" },
      ],
      websiteLabel: "",
      isAddWebsiteLabel: false,
      isWebsiteArrayModelOpen: false,
      isWebsiteModelOpen: false,
      isAddWebsiteArrayLabel: false,
      //date
      isDateModelOpen: false,
      dateLableList: [{ label: "Birthday" }, { label: "Other" }],
      dateLabel: "",
      isAddDateLabel: false,
      isDateArrayModelOpen: false,
      isDateModelOpen: false,
      isAddDateArrayLabel: false,
      //note
      isNoteModelOpen: false,
      noteLabelList: [{ label: "Note 1 " }],
      noteLabel: "",
      isAddNoteLabel: false,
      isNoteArrayModelOpen: false,
      isNoteModelOpen: false,
      isAddNoteArrayLabel: false,
      //company

      isCompanyModelOpen: false,
      companyLableList: [{ label: "Job Ttile" }, { label: "Work Hours" }],
      companyLabel: "",
      isAddCompanyLabel: false,
      isCompanyArrayModelOpen: false,
      isCompanyModelOpen: false,
      isAddCompanyArrayLabel: false,

      //job Title
      isJobTitleModelOpen: false,
      jobTitleLableList: [{ label: "Job" }, { label: "Work" }],
      jobTitleLabel: "",
      isAddjobTitleLabel: false,
      isjobTitleArrayModelOpen: false,
      isJobTitleModelOpen: false,
      isAddJobTitleArrayLabel: false,

      //work Hours
      isWorkHourseModelOpen: false,
      workHoursLableList: [{ label: "Job" }, { label: "Work" }],
      workHoursLabel: "",
      isAddworkHoursLabel: false,
      isWorkHoursArrayModelOpen: false,
      isWorkHoursModelOpen: false,
      isAddWorkHoursArrayLabel: false,

      isVisibleWork: false,
      choosenWork: "",
      isVisibleWorkTo: false,
      choosenWorkTo: "",
      isVisibleWorkArray: false,
      choosenWorkArray: [],
      isVisibleWorkToArray: false,
      choosenWorkToArray: "",
      countryData: data,
      modalVisible: false,
      index: "",

      //address section
      addressModelKey: "",
      labelIndex: "",
      addressNameOnly: "",
      addressSection: false,
      addressIndexOnly: "",

      //email section
      emailSection: false,
      emailIndexOnly: "",
      emailNameOnly: "",
      emailCounter: 0,

      //mobile Section
      numberSection: false,
      numberIndexOnly: "",
      numberNameOnly: "",
      numberCounter: 0,
      //messanger Section
      messangerSection: false,
      messangerIndexOnly: "",
      messangerNameOnly: "",
      messangerCounter: 0,
      //social section
      socialSection: false,
      socialIndexOnly: "",
      socialNameOnly: "",
      socialCounter: 0,
      //Website section
      websiteSection: false,
      websiteIndexOnly: "",
      websiteNameOnly: "",
      websiteCounter: 0,
      //date section
      dateSection: false,
      dateIndexOnly: "",
      dateNameOnly: "",
      dateCounter: 0,
      //note section
      noteSection: false,
      noteIndexOnly: "",
      noteNameOnly: "",
      noteCounter: 0,
      //company section
      companySection: false,
      companyIndexOnly: "",
      companyNameOnly: "",
      companyCounter: 0,
      isTrue: false,

      //mobile label
      customModel: false,
      mLabels: [],
      mLabel: [],
      // for notification
      isDateTimePickerVisible: false,
      notificationTime: moment(),
      notificationTime2: "",
      notificationTitle: "Birthday Notification",
      notificationDescription: "May your day is Awesome",
      isVisibleOverlay: false,
      notifyData: {},
      tz:[],
      tzs:"",
      workViewOpen:false,
      selectItem:"",
      addedMobile:0,
      //layout
      modalX: {
        left: 0,
        top: 0,
        width: 0,
        height: 0,
      },
      modalY:"",
      modalWidth:"",
      modalHeight:"",
    };
  }
  componentDidMount = async () => {
    fcmService.register(
      this.onRegister,
      this.onNotification,
      this.onOpenNotification
    );
    this.timeZoneField();
  };
  timeZoneField = async() =>{
    this.state.tz.push("GMT (Greenwhich)");
    this.state.tz.push("GMT (Universal)");
    this.state.tz.push("GMT+1:00(European Central)");
    this.state.tz.push("GMT+2:00(Eastern European)");
    this.state.tz.push("GMT+2:00(Arabic Egypt Standard)");
    this.state.tz.push("GMT+3:00(Eastern African)");
    this.state.tz.push("GMT+3:30(Middle East Time)");
    this.state.tz.push("GMT+4:00(Near East)");
    this.state.tz.push("GMT+5:00(Pakistan Lahore)");
    this.state.tz.push("GMT+5:30(India Standard)");
    this.state.tz.push("GMT+6:00(Bangladesh)");
    this.state.tz.push("GMT+7:00(Vietnam)");
    this.state.tz.push("GMT+8:00(China Taiwan)");
    this.state.tz.push("GMT+9:00(Japan)");
    this.state.tz.push("GMT+9:30(Australia Central) ");
    this.state.tz.push("GMT+10:00(Australia Eastern) ");
    this.state.tz.push("GMT+11:00(Solomon Standard)");
    this.state.tz.push("GMT+12:00(New Zealand)");
    this.state.tz.push("GMT-11:00(Midway Islands )");
    this.state.tz.push("GMT-10:00(Hawaii)");
    this.state.tz.push("GMT-9:00(Alaska)");
    this.state.tz.push("GMT-8:00(Pacific)");
    this.state.tz.push("GMT-7:00(Phoenix)");
    this.state.tz.push("GMT-7:00(Mountain)");
    this.state.tz.push("GMT-6:00(Central)");
    this.state.tz.push("GMT-5:00(Eastern)");
    this.state.tz.push("GMT-5:00(Indiana Eastern)");
    this.state.tz.push("GMT-5:00(Puerto Rico)");
    this.state.tz.push("GMT-5:00(US Virgin Islands Time)");
    this.state.tz.push("GMT-4:00(Canada Newfoundland Time)");
    this.state.tz.push("GMT-3:00(Argentina)");
    this.state.tz.push("GMT-3:00(Brazil Eastern)");
    this.state.tz.push("GMT-1:00(Central African )");
    this.setState({tzs :  this.state.tz});
  }
  ShowHideTextComponentView = async () => {
    if (this.state.status == false) {
      this.setState({ status: true });
    } else {
      this.setState({ status: false });
    }
    const {
      profile_image,
      profile_image2,
      profile_image3,
      first_name,
      middle_name,
      last_name,
      nick_name,
      number1,
      number2,
      number3,
      numberArray,
      email,
      email2,
      emailArray,
      address,
      addressArray,
      messanger,
      messanger1,
      messenger2,
      messangerArray,
      socialMedia,
      social_media1,
      social_media2,
      socialMediaArray,
      website,
      website1,
      website2,
      websiteArray,
      date,
      dateArray,
      note,
      noteArray,
      company,
      companyArray,
      job_title,
      work_hour,
      mobileLabel,
      notificationTime,
      notificationTime2,
    } = this.state;

    const { username } = this.props;

    if (this.state.status == true) {
      if (first_name == "") {
        this.refs.toast.show("Please enter data to save contact");
      } else {
        if (
          first_name !== "" ||
          middle_name !== "" ||
          last_name !== "" ||
          nick_name !== "" ||
          number1 !== "" ||
          number2 !== "" ||
          number3 !== "" ||
          email !== "" ||
          email2 !== "" ||
          address !== "" ||
          messenger1 !== "" ||
          messenger2 !== "" ||
          social_media1 !== "" ||
          social_media2 !== "" ||
          website1 !== "" ||
          website2 !== "" ||
          dob !== "" ||
          note !== "" ||
          company !== "" ||
          job_title !== "" ||
          work_hour !== ""
        ) {
          if (profile_image !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ profile_image: profile_image });
          }

          if (first_name !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ first_name: first_name });
          }
          if (number1.number1 !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ number1: number1 });
          }
          var notify = notificationTime.toString();

          if (notificationTime !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ notificationTime: notify });
          }
          // if (mobileLabel !== "") {
          //   firebase
          //     .firestore()
          //     .collection("user")
          //     .doc(`${username}`)
          //     .update({ number1 : number1 });
          // }
          if (email.email !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ email: email });
          }
          if (emailArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ emailArray: emailArray });
          }
          if (address.address !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ address: address });
          }
          if (addressArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ addressArray: addressArray });
          }
          if (messanger.messanger !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ messanger: messanger });
          }
          if (messangerArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ messangerArray: messangerArray });
          }
          if (socialMedia.socialMedia !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ facebook: socialMedia });
          }
          if (socialMediaArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ socialMediaArray: socialMediaArray });
          }
          if (website.website !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ website: website });
          }
          if (websiteArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ websiteArray: websiteArray });
          }
          if (date.date !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ date: date });
          }
          if (dateArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ dateArray: dateArray });
          }
          if (note !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ note: note });
          }
          if (noteArray !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ noteArray: noteArray });
          }

          if (company !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ company: company });
          }
          if (job_title !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ job_title: job_title });
          }
          if (work_hour.monday.first !== "") {
            firebase
              .firestore()
              .collection("user")
              .doc(`${username}`)
              .update({ work_hour: work_hour });
          }
          this.setState({
            status: false,
            profile_image: "",
            profile_image2: "",
            profile_image3: "",
            first_name: "",
            middle_name: "",
            last_name: "",
            nick_name: "",
            number1: "",
            number2: "",
            number3: "",
            numberArray: [],
            email: "",
            email2: "",
            emailArray: [],
            address: "",
            addressArray: [],
            messenger1: "",
            messenger2: "",
            messangerArray: [],
            social_media1: "",
            social_media2: "",
            socialMediaArray: [],
            website1: "",
            website2: "",
            websiteArray: [],
            date: "",
            dateArray: [],
            note: "",
            noteArray: [],
            company: "",
            companyArray: [],
            job_title: "",
            work_hour: "",
          });
          alert("Add Information successfully");
          // {this.props.dateChange.mode === "ON" ?
          //     this.setReminder() : alert("Datechange mode off")
          //  }
        }
      }
    } else {
      this.setState({ status: true });
    }
  };
  selectPhoto = () => {
    ActionSheet.show(
      {
        options: BUTTONS,
        cancelButtonIndex: CANCEL_INDEX,
        destructiveButtonIndex: DESTRUCTIVE_INDEX,
        title: "Select Photo",
      },
      (buttonIndex) => {
        switch (buttonIndex) {
          case 0:
            this.takePhtotFromCamera();
            break;

          case 1:
            this.fromGallery();
            break;
          default:
            break;
        }
      }
    );
  };
  selectPhoto2 = () => {
    ActionSheet.show(
      {
        options: BUTTONS,
        cancelButtonIndex: CANCEL_INDEX,
        destructiveButtonIndex: DESTRUCTIVE_INDEX,
        title: "Select Photo",
      },
      (buttonIndex) => {
        switch (buttonIndex) {
          case 0:
            this.takePhotoFromCamera2();
            break;

          case 1:
            this.fromGallery2();
            break;
          default:
            break;
        }
      }
    );
  };
  selectPhoto3 = () => {
    ActionSheet.show(
      {
        options: BUTTONS,
        cancelButtonIndex: CANCEL_INDEX,
        destructiveButtonIndex: DESTRUCTIVE_INDEX,
        title: "Select Photo",
      },
      (buttonIndex) => {
        switch (buttonIndex) {
          case 0:
            this.takePhtotFromCamera3();
            break;

          case 1:
            this.fromGallery3();
            break;
          default:
            break;
        }
      }
    );
  };
  fromGallery = () => {
    ImagePicker.openPicker({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image) => {
      this.setState({ profile_image: image.path });
      console.log("URI ......>", image.path);
      console.log(image);
      this.setState({
        image: {
          uri: image.path,
          width: image.width,
          height: image.height,
          mime: image.mime,
        },
        images: null,
      });
    });
  };

  takePhtotFromCamera = () => {
    ImagePicker.openCamera({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image) => {
      this.setState({ profile_image: image.path });
      console.log("URI ......>", image.path);
      console.log(image);
      this.setState({
        image: {
          uri: image.path,
          width: image.width,
          height: image.height,
          mime: image.mime,
        },
        images: null,
      });
    });
  };

  takePhotoFromCamera2 = () => {
    ImagePicker.openCamera({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image2) => {
      this.setState({ profile_image2: image2.path });
      console.log(image2);
      this.setState({
        image2: {
          uri: image2.path,
          width: image2.width,
          height: image2.height,
          mime: image2.mime,
        },
        images: null,
      });
    });
  };

  fromGallery2 = () => {
    ImagePicker.openPicker({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image2) => {
      this.setState({ profile_image2: image2.path });
      console.log(image2);
      this.setState({
        image2: {
          uri: image2.path,
          width: image2.width,
          height: image2.height,
          mime: image2.mime,
        },
        images: null,
      });
    });
  };

  takePhtotFromCamera3 = () => {
    ImagePicker.openCamera({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image3) => {
      this.setState({ profile_image3: image3.path });
      console.log(image3);
      this.setState({
        image3: {
          uri: image3.path,
          width: image3.width,
          height: image3.height,
          mime: image3.mime,
        },
        images: null,
      });
    });
  };

  fromGallery3 = () => {
    ImagePicker.openPicker({
      width: 300,
      height: 400,
      cropping: true,
    }).then((image3) => {
      this.setState({ profile_image3: image3.path });
      console.log(image3);
      this.setState({
        image3: {
          uri: image3.path,
          width: image3.width,
          height: image3.height,
          mime: image3.mime,
        },
        images: null,
      });
    });
  };
  renderImage = (image) => {
    return (
      <Image
        style={{
          width: width * 0.189,
          height: width * 0.188,
          borderRadius: 7,
          borderWidth: 3,
          resizeMode: "cover",
        }}
        source={image}
      />
    );
  };
  renderImage2 = (image2) => {
    return (
      <Image
        style={{
          width: width * 0.189,
          height: width * 0.188,
          borderRadius: 7,
          borderWidth: 3,
          resizeMode: "cover",
        }}
        source={image2}
      />
    );
  };
  renderImage3 = (image3) => {
    return (
      <Image
        style={{
          width: width * 0.189,
          height: width * 0.188,
          borderRadius: 7,
          borderWidth: 3,
          resizeMode: "cover",
        }}
        source={image3}
      />
    );
  };

  renderHeader() {
    return (
      <Header
        title="My Contact Information"
        onPress={() => this.props.navigation.openDrawer()}
      />
    );
  }
  renderMiddle() {
    return (
      <Root>
        <View style={{ alignItems: "center" }}>
          {/* <Text style={styles.lableText}>Friend</Text> */}
          <View style={styles.middleView}>
            <View style={styles.firstMiddle}>
              <View style={styles.squareBorder}>
                {this.renderImage(this.state.image)}
              </View>

              <TouchableOpacity
                style={styles.first}
                onPress={this.state.status ? this.selectPhoto : null}
              >
                <Text style={styles.firstText}>Select Photo</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.firstMiddle}>
              <View style={styles.squareBorder}>
                {this.renderImage2(this.state.image2)}
              </View>
              <TouchableOpacity
                style={styles.first}
                onPress={this.state.status ? this.selectPhoto2 : null}
              >
                <Text style={styles.firstText}>Select Photo</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.firstMiddle}>
              <View style={styles.squareBorder}>
                {this.renderImage3(this.state.image3)}
              </View>
              <TouchableOpacity
                style={styles.first}
                onPress={this.state.status ? this.selectPhoto3 : null}
              >
                <Text style={styles.firstText}>Select Photo</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Root>
    );
  }
  renderName() {
    return (
      <View style={{ marginTop: Metrics.baseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={innerimg} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>
              <TextInput
                placeholder=""
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                // maxLength={10}
                editable={this.state.status ? true : false}
                value={this.state.first_name}
                onChangeText={(value) => this.setState({ first_name: value })}
                ref={(input) => {
                  this.first_name = input;
                }}
              />
              <View style={styles.rightView}>
                <Text style={styles.righttext}>First Name</Text>
              </View>
            </View>

            <View style={styles.filedView}>
              <TextInput
                placeholder=""
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                // maxLength={10}
                editable={this.state.status ? true : false}
                value={this.state.middle_name}
                onChangeText={(value) => this.setState({ middle_name: value })}
                ref={(input) => {
                  this.middle_name = input;
                }}
              />
              <View style={styles.rightView}>
                <Text style={styles.righttext}>Middle Name</Text>
              </View>
            </View>

            <View style={styles.filedView}>
              <TextInput
                placeholder=""
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                // maxLength={10}
                editable={this.state.status ? true : false}
                value={this.state.last_name}
                onChangeText={(value) => this.setState({ last_name: value })}
                ref={(input) => {
                  this.last_name = input;
                }}
              />
              <View style={styles.rightView}>
                <Text style={styles.righttext}>Last Name</Text>
              </View>
            </View>

            <View style={styles.filedView}>
              <TextInput
                placeholder=""
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                editable={this.state.status ? true : false}
                value={this.state.nick_name}
                onChangeText={(value) => this.setState({ nick_name: value })}
                ref={(input) => {
                  this.nick_name = input;
                }}
              />
              <View style={styles.rightView}>
                <Text style={styles.righttext}>Nickname</Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    );
  }
  addNumber = () => {
    console.log("Before---->", this.state.addedMobile)
    this.setState({ isMobileModelOpen: false });

    var add = this.state.addedMobile + 1
    this.setState({ addedMobile: add });
    console.log(" after   Addedd---->", add)
    console.log(" Sttae---->", this.state.addedMobile)
    this.setState({ isMobileModelOpenArray: false });
    if (this.state.number1 == "") {
      alert("Please Fill the Field");
    }
    if (this.state.number1 !== "") {
      if (this.state.numberCounter == 0) {
        this.setState({
          numberCounter: this.state.numberCounter + 1,
          numberSection: true,
          numberArray: [...this.state.numberArray, { number: "value" }],
        });
      }
    }
    if (this.state.numberSection == true) {
      if (this.state.numberIndexOnly == this.state.numberCounter - 1) {
        if (this.state.numberNameOnly !== "") {
          this.setState({
            numberCounter: this.state.numberCounter + 1,
            numberSection: true,
            numberArray: [...this.state.numberArray, { number: "value" }],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeNumberArray = (value, index) => {
    if (value.isVerified == true) {
      this.setState({ numberIndexOnly: index });
      this.setState({ numberNameOnly: value });
      this.state.numberArray[index].number = value.unmaskedPhoneNumber;
      this.setState({ numberArray: this.state.numberArray });
    } else {
      this.setState({ numberIndexOnly: index });
      this.setState({ numberNameOnly: value });
      this.state.numberArray[index].number = value.unmaskedPhoneNumber;
      this.setState({ numberArray: this.state.numberArray });
    }
    console.log(value.isVerified);
  };
  removeItem = (key) => {
    const { numberArray } = this.state;
    numberArray.splice(key, 1);
    this.setState({
      deleteArray: numberArray,
    });
  };

  leftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeItem}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };

  changeMobileLabelArray = (value, index) => {
    this.state.mobileLabelArray[index].label = value;
    this.setState({ mobileLabelArray: this.state.mobileLabelArray });
  };

  onSubmit = () => {
    const { mobileArray } = this.state;
    const { username } = this.props;
    firebase
      .firestore()
      .collection("user")
      .doc(`${username}`)
      .collection("mobileLabel")
      .add({ mobileArray: mobileArray });
    this.setState({ mobileArray: "" });
    this.setState({ phoneSection: false });
    this.mobileLabelOpen();
  };
  customOpen = () => {
    this.setState({ phoneSection: true });
  };
  onChangeNumber = (value) => {
    this.state.number1.number1 = value;
    this.setState({ number1: this.state.number1 });
  };

  mobileViewOpen = () => {
    this.setState({ isMobileModelOpen: true });
    this.setState({
      mobileLabelArray: [...this.state.mobileLabelArray, { label: "" }],
    });
  };

  mobileViewOpenArray = (key) => {

    let key_to_update = {};
    key_to_update = true;
    this.setState({
      isMobileModelOpenArray: key_to_update  });
    this.setState({
      mobileLabelArray: [...this.state.mobileLabelArray, { label: "" }],
    });
    //console.log("added counter------>", this.state.addedMobile);

        // if (key !== this.state.addedMobile) {
        //   this.setState({ isMobileModelOpenArray: true });
        // } else {
        //   console.log("noooo----->")
        // }
        // if(key == this.state.numberCounter){
        //   this.setState({ isMobileModelOpenArray: false });
        // }

  };
  mobileLabelOpen = (item) => {
     const { username } = this.props;
    firebase
      .firestore()
      .collection("user")
      .doc(username)
      .collection("mobileLabel")
      .get()
      .then((snap) => {
        snap.forEach((doc) => {
          var item = doc._data;

          this.state.mLabel.push(item);
        });
        this.setState({ mLabels: this.state.mLabel });
      });
  };

  renderMobileLabel = ({ item, index }) => {
    return (
      <TouchableHighlight
        style={{}}
        underlayColor="transparent"
       >
        <Text style={styles.labelName}>{item.label} </Text>
      </TouchableHighlight>
    );
  };

  renderItem({ item, index }) {
    return (
      <TouchableOpacity >
        <Text style={styles.labelName}> {item.mobileArray}</Text>
      </TouchableOpacity>
    );
  }

  addTextInput = (index, showPop) => {
        let textInput = this.state.textInput;
        textInput.map((item, i) => {
          textInput[i].show = false;
        });
        if (textInput.length < 5) {
          textInput.push({ label: "Select Type", show: false });
        }

        this.setState({ textInput });
      };

      show = (index) => {
        var data = this.state.textInput;
        data.map((item, i) => {
          data[i].show = false;
        });
        data[index].show = true;
        this.setState({ textInput: data });
      };
      //function to remove TextInput dynamically
      removeTextInput = () => {
        let textInput = this.state.textInput;
        let inputData = this.state.inputData;
        textInput.pop();
        inputData.pop();
        this.setState({ textInput, inputData });
      };

      //function to add text from TextInputs into single array
      addValues = (phone, index) => {
        let dataArray = this.state.inputData;
        let checkBool = false;
        if (dataArray.length !== 0) {
          dataArray.forEach((element) => {
            if (element.index === index) {
              element.phone = phone;
              checkBool = true;
            }
          });
        }
        if (checkBool) {
          this.setState({
            inputData: dataArray,
          });
        } else {
          dataArray.push({ phone, index });
          this.setState({
            inputData: dataArray,
          });
        }
      };

      //function to console the output
      getValues = () => {
        const newFile = this.state.inputData.map((item, index) => {
          return { ...item, label: this.state.textInput[index].label };
        });
        this.setState({ inputData: newFile }, () => {
          alert(JSON.stringify(this.state.inputData));
        });
      };

      selectLabel = (index, label) => {
        var data = this.state.textInput;
        data[index].label = label;
        data[index].show = false;
        this.setState({ textInput: data });
      };

      onChangeText = (number, index) => {
        if (number.isVerified) {
          this.addValues(number.dialCode + "-" + number.unmaskedPhoneNumber, index);
        }
      };

  renderMobile() {
    const { mobileLabelList } = this.state;
     return (
      <View style={styles.container}>
        {this.state.textInput.map((item, index) => {
          return (
            <View>
              <View style={styles.searchSection}>
                <IntlPhoneInput
                  onChangeText={(number) => this.onChangeText(number, index)}
                  defaultCountry="IN"
                  containerStyle={{
                    marginLeft: -5,
                    flex: 1,
                    height: 48,
                  }}
                  phoneInputStyle={styles.input}
                />
                <TouchableOpacity
                  style={styles.modalBtn}
                  onPress={() => this.show(index)}
                >
                  <Text style={styles.type}>{item.label}</Text>
                </TouchableOpacity>
              </View>
              {item.show && (
                <ScrollView
                  style={[
                    styles.modal,
                    {
                      // display:  ? 'flex' : 'none',
                    },
                  ]}
                >
                  {mobileLabelList.map((i) => {
                    return (
                      <TouchableOpacity
                        activeOpacity={0.8}
                        style={{ backgroundColor: "red" }}
                        onPress={() => this.selectLabel(index, i.label)}
                      >
                        <View style={styles.labelContainer}>
                          <Text style={styles.label}>{i.label}</Text>
                        </View>
                      </TouchableOpacity>
                    );
                  })}

                  <View style={styles.labelContainer}>
                    <Text
                      style={[
                        styles.label,
                        {
                          paddingBottom: 0,
                        },
                      ]}
                    >
                      Custom
                    </Text>
                    <TextInput
                      style={{
                        borderWidth: 1,
                        marginBottom: 15,
                        marginHorizontal: 10,
                        height: 40,
                        paddingHorizontal: 10,
                      }}
                      placeholder={"Label"}
                      placeholderTextColor={"#777"}
                      onChangeText={(customLabel) =>
                        this.setState({ customLabel })
                      }
                      onSubmitEditing={() =>
                        this.selectLabel(index, this.state.customLabel)
                      }
                    />
                  </View>
                </ScrollView>
              )}
            </View>
          );
        })}

        <View style={{ flexDirection: "row" }}>
          <View style={{ flex: 1 }}>
            <TouchableOpacity
              style={styles.addNewBox}
              onPress={() =>
                this.addTextInput(this.state.textInput.length, false)
              }
            >
              <Text style={styles.addNew}>+ Add Phone Number</Text>
            </TouchableOpacity>
          </View>

          <View style={{ flex: 1, alignItems: "flex-end" }}>
            <TouchableOpacity
              style={styles.addNewBox}
              onPress={() => this.removeTextInput()}
            >
              <Text style={styles.addNew}>Remove Phone Number</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View
          style={{
            position: "absolute",
            top: 20,
            width: width,
            alignItems: "center",
          }}
        >
          {/* <Button
                        title='Get Values'
                        buttonStyle={{ width: '100%' }}
                        onPress={() => this.getValues()} /> */}
        </View>
      </View>
    );
  }
  addEmail = () => {
    if (this.state.email.email == "") {
      alert("Please Fill the Field");
    }
    if (this.state.email.email !== "") {
      if (this.state.emailCounter == 0) {
        this.setState({
          emailCounter: this.state.emailCounter + 1,
          emailSection: true,
          emailArray: [...this.state.emailArray, { email: "", label: "" }],
        });
      }
    }
    if (this.state.emailSection == true) {
      if (this.state.emailIndexOnly == this.state.emailCounter - 1) {
        if (this.state.emailNameOnly !== "") {
          this.setState({
            emailCounter: this.state.emailCounter + 1,
            emailSection: true,
            emailArray: [...this.state.emailArray, { email: "", label: "" }],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };
  onChangeEmail = (value) => {
    this.state.email.email = value;
    this.setState({ email: this.state.email });
  };
  onChangeEmailArray = (value, index) => {
    this.setState({ emailIndexOnly: index });
    this.setState({ emailNameOnly: value });
    this.state.emailArray[index].email = value;
    this.setState({ emailArray: this.state.emailArray });
  };

  changeEmailLabelArray = (label, index) => {
    this.setState({ isEmailArrrayModelOpen: false });
    this.state.emailArray[index].label = label;
    this.setState({ emailArray: this.state.emailArray });
  };

  changeEmailLabel = (label) => {
    this.setState({ isEmailModelOpen: false });
    this.state.email.label = label;
    this.setState({ email: this.state.email });
  };
  removeEmail = (key) => {
    const { emailArray } = this.state;
    emailArray.splice(key, 1);
    this.setState({
      deleteEmailArray: emailArray,
    });
  };

  EmailleftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeEmail}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  renderEmail() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={email} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>

              {this.state.status ?
                this.state.isEmailSection == true ? (
                <View>
                <TouchableOpacity style={{ flexDirection: "column" }}>
                  <Text style={[styles.Text_1,{ fontSize: width * 0.02, width: width * 0.5 },]} >
                    Email
                  </Text>
                  <TextInput
                    placeholder="E-mail Address"
                    style={[
                      styles.Text_1,
                      { fontSize: width * 0.03, width: width * 0.5 },
                    ]}
                    placeholderTextColor={COLORS.main_text_color}
                    editable={this.state.status ? true : false}
                    onChangeText={(value) => this.onChangeEmail(value)}
                  />
                  </TouchableOpacity>
              </View>
              ) : (
                <TouchableOpacity
                  onPress={() => {
                    this.setState({ isEmailSection: true });
                  }}
                >
                  <Text
                    style={[
                      styles.Text_1,
                      { fontSize: width * 0.03, width: width * 0.5 },
                    ]}
                  >
                    Email
                  </Text>
                </TouchableOpacity>
              ) : (
                <TouchableOpacity>
                  <Text style={[styles.Text_1, { fontSize: width * 0.03 }]}>
                     Email
                  </Text>
                </TouchableOpacity>
              )}
            </View>
            {this.state.emailSection == true &&
              this.state.emailArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.EmailleftAction}>
                    <View style={styles.filedView} key={key}>
                    <TouchableOpacity style={{ flexDirection: "column" }}>
                      <Text style={[styles.Text_1,{ fontSize: width * 0.02, width: width * 0.5 },]} >
                        Email
                      </Text>
                      <TextInput
                        placeholder="E-mail Address"
                        style={styles.stylefiledText}
                        placeholderTextColor={COLORS.main_text_color}
                        // key={key}
                        keyboardType={"email-address"}
                        onChangeText={(email) => {
                          this.onChangeEmailArray(email, key);
                        }}
                      />
                       </TouchableOpacity>
                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.rightView}
                        // key={key}
                        onPress={() =>
                          this.setState({ isEmailArrrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>

                      {this.state.emailArray[key].label !== "" ? (
                        <View style={styles.rightView}>
                          <Text style={styles.righttext}>
                            {this.state.emailArray[key].label}
                          </Text>
                        </View>
                      ) : null}

                    </View>
                  </Swipeable>
                );
              })}
            <TouchableOpacity
              onPress={() => this.addEmail()}
              disable={this.state.disabledEmail}
            >
              {this.state.status ? (
                <NormalText> + Add E-mail Address </NormalText>
              ) : null}
            </TouchableOpacity>

          </View>
        </View>
      </View>
    );
  }
  addAddress = () => {
    if (this.state.address.address == "") {
      alert("Please Fill the Field");
    }
    if (this.state.address.address !== "") {
      if (this.state.counter == 0) {
        this.setState({
          counter: this.state.counter + 1,
          addressSection: true,
          addressArray: [
            ...this.state.addressArray,
            { address: "", label: "" },
          ],
        });
      }
    }
    if (this.state.addressSection == true) {
      if (this.state.addressIndexOnly == this.state.counter - 1) {
        if (this.state.addressNameOnly !== "") {
          this.setState({
            counter: this.state.counter + 1,
            addressSection: true,
            addressArray: [
              ...this.state.addressArray,
              { address: "", label: "" },
            ],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeAddress = (value) => {
    this.state.address.address = value;
    this.setState({ address: this.state.address });
  };

  onChangeAddressArray = (value, index) => {
    this.setState({ addressIndexOnly: index });
    this.setState({ addressNameOnly: value });
    this.state.addressArray[index].address = value;
    this.setState({ addressArray: this.state.addressArray });
  };

  changeAddressLabelArray = (label, index) => {
    this.setState({ isAddressArrayModelOpen: false });
    this.state.addressArray[index].label = label;
    this.setState({ AddressArray: this.state.addressArray });
  };

  changeAddressLabel = (label) => {
    this.setState({ isAddressModelOpen: false });
    this.state.address.label = label;
    this.setState({ Address: this.state.address });
  };

  removeAddress = (key) => {
    const { addressArray } = this.state;
    addressArray.splice(key, 1);
    this.setState({
      deleteAddressArray: addressArray,
    });
  };

  AddressLeftAction = (key) => {
    return (
      <TouchableOpacity
        onPress={this.removeAddress}
        style={{ justifyContent: "center", alignItems: "center" }}
      >
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  ModelOpen = (key) => {
    this.setState({ addressModelKey: key });
    this.setState({ isAddressArrayModelOpen: true });
  };
  renderAddress() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={home} style={styles.innerStyle} />
          </View>

          <View>

            {this.state.status && this.state.isAddressSection == true ? (
              <View style={styles.addressFieldContainer}>
               <TouchableOpacity style={{ flexDirection: "column" }}>
                    <Text style={[styles.Text_1,{ fontSize: width * 0.02, width: width * 0.5 },]} >
                       Address
                    </Text>

                    <TextInput
                        placeholder="Address"
                        style={styles.addressField}
                        placeholderTextColor={COLORS.main_text_color}
                        multiline={true}
                        numberOfLines={5}
                        editable={this.state.status ? true : false}
                        onChangeText={(value) => this.onChangeAddress(value)}
                    />
               </TouchableOpacity>
               </View>
            )  :
            <TouchableOpacity
            onPress={() => {
              this.setState({ isAddressSection : true });
            }}
            style={styles.filedView}
          >
            <Text
              style={[
                styles.Text_1,
                { fontSize: width * 0.03 },
              ]}
            >
             Address
            </Text>
          </TouchableOpacity> }

            {this.state.addressSection == true &&
                this.state.addressArray.map((input, key) => {
                  return (
                    <Swipeable renderLeftActions={this.AddressLeftAction}>
                      <View style={styles.addressFieldContainer} key={key}>
                        <TextInput
                          placeholder="Address"
                          style={styles.addressField}
                          placeholderTextColor={COLORS.main_text_color}
                          multiline={true}
                          numberOfLines={5}
                          onChangeText={(address) => {
                            this.onChangeAddressArray(address, key);
                          }}
                        />
                        <TouchableHighlight
                          underlayColor="transparent"
                          style={styles.addressRightView}
                          // key={key}
                          onPress={() =>
                            this.setState({ isAddressArrayModelOpen: true })
                          }
                        >
                          <Icon
                            style={styles.iconSize}
                            size={width * 0.06}
                            name="chevron-small-down"
                          />
                        </TouchableHighlight>

                        {this.state.addressArray[key].label !== "" ? (
                          <View style={styles.addressRightView}>
                            <Text style={styles.addressRighttext}>
                              {this.state.addressArray[key].label}
                            </Text>
                          </View>
                        ) : null}
                        <Modal
                          style={styles.footerModal}
                          visible={this.state.isAddressArrayModelOpen}
                          transparent={true}
                          animationType="fade"
                          onRequestClose={() =>
                            this.setState({ isAddressArrayModelOpen: false })
                          }
                        >
                          <View style={styles.contactContent}>
                            <View style={styles.content}>
                              <Text style={styles.modalHeader}>Address</Text>
                              <View style={{ flexDirection: "column" }}>
                                {this.state.addressLabelList.map(
                                  (item, index) => {
                                    return (
                                      <TouchableHighlight
                                        underlayColor="transparent"
                                        onPress={() => {
                                          this.changeAddressLabelArray(
                                            item.label,
                                            key
                                          );
                                        }}
                                      >
                                        <Text style={styles.labelName}>
                                          {item.label}
                                        </Text>
                                      </TouchableHighlight>
                                    );
                                  }
                                )}
                                <TouchableHighlight
                                  underlayColor="transparent"
                                  onPress={() =>
                                    this.setState({
                                      isAddAddressArrayLabel: true,
                                      addressLabel: "",
                                    })
                                  }
                                >
                                  <Text style={styles.labelName}> Custom </Text>
                                </TouchableHighlight>
                              </View>
                            </View>
                          </View>
                        </Modal>
                        <Modal
                          style={styles.footerModal}
                          visible={this.state.isAddAddressArrayLabel}
                          transparent={true}
                          // key={key}
                          animationType="fade"
                        >
                          <View style={styles.contactContent}>
                            <View style={styles.content}>
                              <Text style={styles.modalHeader}>
                                Custom label name
                              </Text>
                              <View style={{ flexDirection: "column" }}>
                                <TextInput
                                  placeholder="Custom label name"
                                  style={styles.addLabelField}
                                  placeholderTextColor={COLORS.main_text_color}
                                  editable={this.state.status ? true : false}
                                  keyboardType={"default"}
                                  onChangeText={(label) => {
                                    this.changeAddressLabelArray(label, key);
                                  }}
                                />
                                <TouchableHighlight
                                  underlayColor="transparent"
                                  style={styles.saveView}
                                  onPress={() =>
                                    this.state.addressLabel !== ""
                                      ? this.setState({
                                          isAddAddressArrayLabel: false,
                                          isAddressArrayModelOpen: false,
                                        })
                                      : this.setState({
                                          isAddAddressArrayLabel: false,
                                        })
                                  }
                                >
                                  <Text
                                    style={{
                                      color: COLORS.main_text_color,
                                      fontFamily: Font.medium,
                                      fontSize: width * 0.04,
                                    }}
                                  >
                                    {" "}
                                    Ok{" "}
                                  </Text>
                                </TouchableHighlight>
                              </View>
                            </View>
                          </View>
                        </Modal>
                      </View>
                    </Swipeable>
                  );
                })
              // }
            }

            <TouchableOpacity
              onPress={() => {
                this.addAddress();
              }}
            >
              {this.state.status ? (
                <NormalText> + Add Address </NormalText>
              ) : null}
            </TouchableOpacity>
            {/* ))} */}

            <Modal
              style={styles.footerModal}
              visible={this.state.isAddressModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() =>
                this.setState({ isAddressModelOpen: false })
              }
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Address</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.addressLabelList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeAddressLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({
                          isAddAddressLabel: true,
                          addressLabel: "",
                        })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddAddressLabel}
              transparent={true}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      onChangeText={(label) => {
                        this.changeAddressLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.addressLabel !== ""
                          ? this.setState({
                              isAddAddressLabel: false,
                              isAddressModelOpen: false,
                            })
                          : this.setState({ isAddAddressLabel: false })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addMessanger = () => {
    if (this.state.messanger.messanger == "") {
      alert("Please Fill the Field");
    }
    if (this.state.messanger.messanger !== "") {
      if (this.state.messangerCounter == 0) {
        this.setState({
          messangerCounter: this.state.messangerCounter + 1,
          messangerSection: true,
          messangerArray: [
            ...this.state.messangerArray,
            { messenger: "", label: "" },
          ],
        });
      }
    }
    if (this.state.messangerSection == true) {
      if (this.state.messangerIndexOnly == this.state.messangerCounter - 1) {
        if (this.state.messangerNameOnly !== "") {
          this.setState({
            messangerCounter: this.state.messangerCounter + 1,
            messangerSection: true,
            messangerArray: [
              ...this.state.messangerArray,
              { messenger: "", label: "" },
            ],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeMessenger = (value) => {
    this.state.messanger.messanger = value;
    this.setState({ messanger: this.state.messanger });
  };

  onChangeMessengerArray = (value, index) => {
    this.setState({ messangerIndexOnly: index });
    this.setState({ messangerNameOnly: value });
    this.state.messangerArray[index].messanger = value;
    this.setState({ messangerArray: this.state.messangerArray });
  };

  changeMessengerLabelArray = (label, index) => {
    this.setState({ isMessangerArrayModelOpen: false });
    this.state.messangerArray[index].label = label;
    this.setState({ messangerArray: this.state.messangerArray });
  };
  changeMessangerLabel = (label) => {
    this.setState({ isMessangerModelOpen: false });
    this.state.messanger.label = label;
    this.setState({ messanger: this.state.messanger });
  };

  removeMessanger = (key) => {
    const { messangerArray } = this.state;
    messangerArray.splice(key, 1);
    this.setState({
      deleteMessangerArray: messangerArray,
    });
  };

  MessangerLeftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeMessanger}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  renderMessage() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={message} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>
            {this.state.status && this.state.isMessangerSection == true ? (
                  <TouchableOpacity style={{ flexDirection: "column" }}>
                  <Text style={[styles.Text_1,{ fontSize: width * 0.02, width: width * 0.5 },]} >
                    Messenger Account
                  </Text>
                  <TextInput
                    placeholder="Messenger Account"
                    style={styles.stylefiledText}
                    placeholderTextColor={COLORS.main_text_color}
                    editable={this.state.status ? true : false}
                    onChangeText={(value) => this.onChangeMessenger(value)}
                  />
                  </TouchableOpacity>
            ) :
            <TouchableOpacity
                  onPress={() => {
                    this.setState({ isMessangerSection: true });
                  }}
                >
                  <Text
                    style={[
                      styles.Text_1,
                      { fontSize: width * 0.03, width: width * 0.5 },
                    ]}
                  >
                    Messenger Account
                  </Text>
                </TouchableOpacity>}

            </View>

            {this.state.messangerSection == true &&
              this.state.messangerArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.MessangerLeftAction}>
                    <View style={styles.filedView} key={key}>
                      <TextInput
                        placeholder="Messenger Account"
                        style={styles.stylefiledText}
                        placeholderTextColor={COLORS.main_text_color}
                        key={key}
                        keyboardType={"default"}
                        onChangeText={(messenger) => {
                          this.onChangeMessengerArray(messenger, key);
                        }}
                      />
                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.addressRightView}
                        onPress={() =>
                          this.setState({ isMessangerArrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>
                      {this.state.messangerArray[key].label !== "" ? (
                        <View style={styles.addressRightView}>
                          <Text style={styles.addressRighttext}>
                            {this.state.messangerArray[key].label}
                          </Text>
                        </View>
                      ) : null}
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isMessangerArrayModelOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ isMessangerArrayModelOpen: false })
                        }
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Messanger Account
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              {this.state.mesangerLabelList.map(
                                (item, index) => {
                                  return (
                                    <TouchableHighlight
                                      underlayColor="transparent"
                                      onPress={() => {
                                        this.changeMessengerLabelArray(
                                          item.label,
                                          key
                                        );
                                      }}
                                    >
                                      <Text style={styles.labelName}>
                                        {" "}
                                        {item.label}{" "}
                                      </Text>
                                    </TouchableHighlight>
                                  );
                                }
                              )}
                              <TouchableHighlight
                                underlayColor="transparent"
                                onPress={() =>
                                  this.setState({
                                    isAddMessangerArrayLabel: true,
                                    messangerLabel: "",
                                  })
                                }
                              >
                                <Text style={styles.labelName}> Custom </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isAddMessangerArrayLabel}
                        transparent={true}
                        animationType="fade"
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Custom label name
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              <TextInput
                                placeholder="Custom label name"
                                style={styles.addLabelField}
                                placeholderTextColor={COLORS.main_text_color}
                                editable={this.state.status ? true : false}
                                keyboardType={"default"}
                                onChangeText={(label) => {
                                  this.changeMessengerLabelArray(label, key);
                                }}
                              />
                              <TouchableHighlight
                                underlayColor="transparent"
                                style={styles.saveView}
                                onPress={() =>
                                  this.state.addressLabel !== ""
                                    ? this.setState({
                                        isAddMessangerArrayLabel: false,
                                        isMessangerArrayModelOpen: false,
                                      })
                                    : this.setState({
                                        isAddMessangerArrayLabel: false,
                                      })
                                }
                              >
                                <Text
                                  style={{
                                    color: COLORS.main_text_color,
                                    fontFamily: Font.medium,
                                    fontSize: width * 0.04,
                                  }}
                                >
                                  {" "}
                                  Ok{" "}
                                </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addMessanger()}
              disable={this.state.disabledMessanger}
            >
              {this.state.status ? (
                <NormalText> + Add Messenger Account </NormalText>
              ) : null}
            </TouchableOpacity>
            <Modal
              style={styles.footerModal}
              visible={this.state.isMessangerModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() =>
                this.setState({ isMessangerModelOpen: false })
              }
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Messanger Account</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.mesangerLabelList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeMessangerLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({
                          isAddMessangerLabel: true,
                          messangerLabel: "",
                        })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddMessangerLabel}
              transparent={true}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      onChangeText={(label) => {
                        this.changeMessangerLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.messangerLabel !== ""
                          ? this.setState({
                              isAddMessangerLabel: false,
                              isMessangerModelOpen: false,
                            })
                          : this.setState({ isAddMessangerLabel: false })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addSocialMedia = () => {
    if (this.state.socialMedia.socialMedia == "") {
      alert("Please Fill the Field");
    }
    if (this.state.socialMedia.socialMedia !== "") {
      if (this.state.socialCounter == 0) {
        this.setState({
          socialCounter: this.state.socialCounter + 1,
          socialSection: true,
          socialMediaArray: [
            ...this.state.socialMediaArray,
            { socialMedia: "", label: "" },
          ],
        });
      }
    }
    if (this.state.socialSection == true) {
      if (this.state.socialIndexOnly == this.state.socialCounter - 1) {
        if (this.state.socialNameOnly !== "") {
          this.setState({
            socialCounter: this.state.socialCounter + 1,
            socialSection: true,
            socialMediaArray: [
              ...this.state.socialMediaArray,
              { socialMedia: "", label: "" },
            ],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeSocialMedia = (value) => {
    this.state.socialMedia.socialMedia = value;
    this.setState({ socialMedia: this.state.socialMedia });
  };

  onChangeSocialMediaArray = (value, index) => {
    this.setState({ socialIndexOnly: index });
    this.setState({ socialNameOnly: value });
    this.state.socialMediaArray[index].socialMedia = value;
    this.setState({ socialMediaArray: this.state.socialMediaArray });
  };

  changeSocialMediaLabelArray = (label, index) => {
    this.setState({ isSocialMediaArrayModelOpen: false });
    this.state.socialMediaArray[index].label = label;
    this.setState({ SocialMediaArray: this.state.socialMediaArray });
  };

  changeSocialMediaLabel = (label) => {
    this.setState({ isSocialMediaModelOpen: false });
    this.state.socialMedia.label = label;
    this.setState({ socialMedia: this.state.socialMedia });
  };
  removesocialMedia = (key) => {
    const { socialMediaArray } = this.state;
    socialMediaArray.splice(key, 1);
    this.setState({
      deleteSocialMediaArray: socialMediaArray,
    });
  };

  socialMedialeftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removesocialMedia}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  renderSocialmedia() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={instagram} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>
            { this.state.status ? (
              this.state.isSocialMediaSection == true ? (
              <TouchableOpacity style={{ flexDirection: "column" }}>
                    <Text
                      style={[
                        styles.Text_1,
                        { fontSize: width * 0.02, width: width * 0.5 },
                      ]}
                    >
                      Social Media Account
                    </Text>
                    <TextInput
                placeholder="Social Media Account"
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                //value={this.state.social_media1}
                editable={this.state.status ? true : false}
                onChangeText={(value) => this.onChangeSocialMedia(value)}
              />
                </TouchableOpacity>
            ) :
            <TouchableOpacity
            onPress={() => {
              this.setState({ isSocialMediaSection : true });
            }}
          >
            <Text
              style={[
                styles.Text_1,
                { fontSize: width * 0.03, width: width * 0.5 },
              ]}
            >
             Social Media Account
            </Text>
          </TouchableOpacity>
          ) : (
          <TouchableOpacity>
          <Text style={[styles.Text_1, { fontSize: width * 0.03 }]}>
          Social Media Account
          </Text>
        </TouchableOpacity>
              )}
            </View>

            {this.state.socialSection == true &&
              this.state.socialMediaArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.socialMedialeftAction}>
                    <View style={styles.filedView} key={key}>
                      <TextInput
                        placeholder="Social Media Account"
                        style={styles.stylefiledText}
                        placeholderTextColor={COLORS.main_text_color}
                        key={key}
                        keyboardType={"default"}
                        onChangeText={(socialMedia) => {
                          this.onChangeSocialMediaArray(socialMedia, key);
                        }}
                      />
                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.addressRightView}
                        // key={key}
                        onPress={() =>
                          this.setState({ isSocialMediaArrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>
                      {this.state.socialMediaArray[key].label !== "" ? (
                        <View style={styles.addressRightView}>
                          <Text style={styles.addressRighttext}>
                            {this.state.socialMediaArray[key].label}
                          </Text>
                        </View>
                      ) : null}

                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isSocialMediaArrayModelOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ isSocialMediaArrayModelOpen: false })
                        }
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>Social Media</Text>
                            <View style={{ flexDirection: "column" }}>
                              {this.state.socialMediaLabelList.map(
                                (item, index) => {
                                  return (
                                    <TouchableHighlight
                                      underlayColor="transparent"
                                      onPress={() => {
                                        this.changeSocialMediaLabelArray(
                                          item.label,
                                          key
                                        );
                                      }}
                                    >
                                      <Text style={styles.labelName}>
                                        {" "}
                                        {item.label}{" "}
                                      </Text>
                                    </TouchableHighlight>
                                  );
                                }
                              )}
                              <TouchableHighlight
                                underlayColor="transparent"
                                onPress={() =>
                                  this.setState({
                                    isAddSocialMediaArrayLabel: true,
                                    socialMedia: "",
                                  })
                                }
                              >
                                <Text style={styles.labelName}> Custom </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isAddSocialMediaArrayLabel}
                        transparent={true}
                        // key={key}
                        animationType="fade"
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Custom label name
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              <TextInput
                                placeholder="Custom label name"
                                style={styles.addLabelField}
                                placeholderTextColor={COLORS.main_text_color}
                                editable={this.state.status ? true : false}
                                keyboardType={"default"}
                                onChangeText={(label) => {
                                  this.changeSocialMediaLabelArray(label, key);
                                }}
                              />
                              <TouchableHighlight
                                underlayColor="transparent"
                                style={styles.saveView}
                                onPress={() =>
                                  this.state.socialMediaLabel !== ""
                                    ? this.setState({
                                        isAddSocialMediaArrayLabel: false,
                                        isSocialMediaArrayModelOpen: false,
                                      })
                                    : this.setState({
                                        isAddSocialMediaArrayLabel: false,
                                      })
                                }
                              >
                                <Text
                                  style={{
                                    color: COLORS.main_text_color,
                                    fontFamily: Font.medium,
                                    fontSize: width * 0.04,
                                  }}
                                >
                                  {" "}
                                  Ok{" "}
                                </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addSocialMedia()}
              disable={this.state.disabledSocialMedia}
            >
              {this.state.status ? (
                <NormalText> + Add Social Media Account </NormalText>
              ) : null}
            </TouchableOpacity>

            <Modal
              style={styles.footerModal}
              visible={this.state.isSocialMediaModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() =>
                this.setState({ isSocialMediaModelOpen: false })
              }
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Social Media</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.socialMediaLabelList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeSocialMediaLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({
                          isAddSocialMediaLabel: true,
                          socialMedia: "",
                        })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddSocialMediaLabel}
              transparent={true}
              // key={key}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      onChangeText={(label) => {
                        this.changeSocialMediaLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.socialMediaLabel !== ""
                          ? this.setState({
                              isAddSocialMediaLabel: false,
                              isSocialMediaModelOpen: false,
                            })
                          : this.setState({
                              isAddSocialMediaLabel: false,
                            })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addWebsite = () => {
    if (this.state.website.website == "") {
      alert("Please Fill the Field");
    }
    if (this.state.website.website !== "") {
      if (this.state.websiteCounter == 0) {
        this.setState({
          websiteCounter: this.state.websiteCounter + 1,
          websiteSection: true,
          websiteArray: [
            ...this.state.websiteArray,
            { website: "", label: "" },
          ],
        });
      }
    }
    if (this.state.websiteSection == true) {
      if (this.state.websiteIndexOnly == this.state.websiteCounter - 1) {
        if (this.state.websiteNameOnly !== "") {
          this.setState({
            websiteCounter: this.state.websiteCounter + 1,
            websiteSection: true,
            websiteArray: [
              ...this.state.websiteArray,
              { website: "", label: "" },
            ],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeWebsite = (value, index) => {
    this.state.website.website = value;
    this.setState({ website: this.state.website });
  };
  onChangeWebsiteArray = (value, index) => {
    this.setState({ websiteIndexOnly: index });
    this.setState({ websiteNameOnly: value });
    this.state.websiteArray[index].website = value;
    this.setState({ websiteArray: this.state.websiteArray });
  };
  changeWebsiteLabelArray = (label, index) => {
    this.setState({ isWebsiteArrayModelOpen: false });
    this.state.websiteArray[index].label = label;
    this.setState({ WebsiteArray: this.state.websiteArray });
  };
  changeWebsiteLabel = (label) => {
    this.setState({ isWebsiteModelOpen: false });
    this.state.website.label = label;
    this.setState({ Website: this.state.website });
  };
  removeWebsite = (key) => {
    const { websiteArray } = this.state;
    websiteArray.splice(key, 1);
    this.setState({
      deleteWebsiteArray: websiteArray,
    });
  };

  WebsiteLeftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeWebsite}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  renderWebsite() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={website} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>
            {this.state.status ? (
               this.state.isWebsitSection == true ? (
                <TouchableOpacity style={{ flexDirection: "column" }}>
                  <Text
                    style={[
                      styles.Text_1,
                      { fontSize: width * 0.02, width: width * 0.5 },
                    ]}
                  >
                    Phone Number
                  </Text>
              <TextInput
                placeholder="Website"
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                //value={this.state.website1}
                editable={this.state.status ? true : false}
                onChangeText={(value) => this.onChangeWebsite(value)}
              />
              </TouchableOpacity>
                ) : (
                  <TouchableOpacity
                    onPress={() => {
                      this.setState({ isWebsitSection : true });
                    }}
                  >
                    <Text
                      style={[
                        styles.Text_1,
                        { fontSize: width * 0.03, width: width * 0.5 },
                      ]}
                    >
                     Website
                    </Text>
                  </TouchableOpacity>
                )
              ) : (
                <TouchableOpacity>
                  <Text style={[styles.Text_1, { fontSize: width * 0.03 }]}>
                    Website
                  </Text>
                </TouchableOpacity>
              )}
            </View>
            {this.state.isWebsitSection == true &&
              this.state.websiteArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.WebsiteLeftAction}>
                    <View style={styles.filedView} key={key}>
                      <TextInput
                        placeholder="Website"
                        style={styles.stylefiledText}
                        placeholderTextColor={COLORS.main_text_color}
                        key={key}
                        keyboardType={"default"}
                        onChangeText={(website) => {
                          this.onChangeWebsiteArray(website, key);
                        }}
                      />
                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.addressRightView}
                        onPress={() =>
                          this.setState({ isWebsiteArrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>
                      {this.state.websiteArray[key].label !== "" ? (
                        <View style={styles.addressRightView}>
                          <Text style={styles.addressRighttext}>
                            {this.state.websiteArray[key].label}
                          </Text>
                        </View>
                      ) : null}
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isWebsiteArrayModelOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ isWebsiteArrayModelOpen: false })
                        }
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>Website</Text>
                            <View style={{ flexDirection: "column" }}>
                              {this.state.websiteLableList.map(
                                (item, index) => {
                                  return (
                                    <TouchableHighlight
                                      underlayColor="transparent"
                                      onPress={() => {
                                        this.changeWebsiteLabelArray(
                                          item.label,
                                          key
                                        );
                                      }}
                                    >
                                      <Text style={styles.labelName}>
                                        {" "}
                                        {item.label}{" "}
                                      </Text>
                                    </TouchableHighlight>
                                  );
                                }
                              )}
                              <TouchableHighlight
                                underlayColor="transparent"
                                onPress={() =>
                                  this.setState({
                                    isAddWebsiteArrayLabel: true,
                                    websiteLabel: "",
                                  })
                                }
                              >
                                <Text style={styles.labelName}> Custom </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isAddWebsiteArrayLabel}
                        transparent={true}
                        animationType="fade"
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Custom label name
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              <TextInput
                                placeholder="Custom label name"
                                style={styles.addLabelField}
                                placeholderTextColor={COLORS.main_text_color}
                                editable={this.state.status ? true : false}
                                keyboardType={"default"}
                                onChangeText={(label) => {
                                  this.changeWebsiteLabelArray(label, key);
                                }}
                              />
                              <TouchableHighlight
                                underlayColor="transparent"
                                style={styles.saveView}
                                onPress={() =>
                                  this.state.addressLabel !== ""
                                    ? this.setState({
                                        isAddWebsiteArrayLabel: false,
                                        isWebsiteArrayModelOpen: false,
                                      })
                                    : this.setState({
                                        isAddWebsiteArrayLabel: false,
                                      })
                                }
                              >
                                <Text
                                  style={{
                                    color: COLORS.main_text_color,
                                    fontFamily: Font.medium,
                                    fontSize: width * 0.04,
                                  }}
                                >
                                  {" "}
                                  Ok{" "}
                                </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addWebsite()}
              disable={this.state.disableWebsite}
            >
              {this.state.status ? (
                <NormalText> + Add Website </NormalText>
              ) : null}
            </TouchableOpacity>
            <Modal
              style={styles.footerModal}
              visible={this.state.isWebsiteModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() =>
                this.setState({ isWebsiteModelOpen: false })
              }
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Website</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.websiteLableList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeWebsiteLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({
                          isAddWebsiteLabel: true,
                          WebsiteLabel: "",
                        })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddWebsiteLabel}
              transparent={true}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      onChangeText={(label) => {
                        this.changeWebsiteLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.WebsiteLabel !== ""
                          ? this.setState({
                              isAddWebsiteLabel: false,
                              isWebsiteModelOpen: false,
                            })
                          : this.setState({ isAddWebsiteLabel: false })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addDate = () => {
    if (this.state.dob == "") {
      alert("Please Fill the Field");
    }
    if (this.state.dob !== "") {
      if (this.state.dateCounter == 0) {
        this.setState({
          dateCounter: this.state.dateCounter + 1,
          dateSection: true,
          dateArray: [...this.state.dateArray, { date: "", label: "" }],
        });
      }
    }
    if (this.state.dateSection == true) {
      if (this.state.dateIndexOnly == this.state.dateCounter - 1) {
        if (this.state.dateNameOnly !== "") {
          this.setState({
            dateCounter: this.state.dateCounter + 1,
            dateSection: true,
            dateArray: [...this.state.dateArray, { date: "", label: "" }],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };
  onRegister = (token) => {
    // console.log("[Notification fcm ] onRegister:", token)
  };
  onNotification = (notify) => {
    console.log("[Notification fcm ] : onNotification:", notify);
    const notification = fcmService.buildNotification(
      this.createNotification(notify)
    );
    fcmService.displayNotification(notification);
  };
  onOpenNotification = (notify) => {
    console.log("[Notification fcm ] : onOpenNotification ", notify);
    this.setState({ notifyData: notify._data }, () =>
      this.setState({ isVisibleOverlay: true })
    );
  };

  setReminder = () => {
    const { notificationTime } = this.state;
    const { notificationDescription, notificationTitle } = this.state;
    let body = {
      _title: notificationTitle,
      _body: notificationDescription,
      _data: {
        title: notificationTitle,
        body: notificationDescription,
      },
      _notificationId: Math.random().toString(),
      time: notificationTime,
    };
    this.scheduleReminder(body);
    //  alert('Your Remider Set SuccessFully.');
  };

  scheduleReminder = (notifyDetails) => {
    const notification = fcmService.buildNotification(
      this.createNotification(notifyDetails)
    );
    fcmService.scheduleNotification(notification, notifyDetails.time);
    this.resetState();
  };
  createNotification = (notify) => {
    const channelObj = {
      channelId: "SmapleChannelID",
      channelName: "SmapleChannelName",
      channelDes: "SmapleChannelDes",
    };
    const channel = fcmService.buildChannel(channelObj);
    const buildNotify = {
      title: notify._title,
      content: notify._body,
      sound: "default",
      channel: channel,
      data: notify._data,
      colorBgIcon: "#1A243B",
      largeIcon: "ic_launcher",
      smallIcon: "ic_launcher",
      vibrate: true,
      dataId: notify._notificationId,
    };
    return buildNotify;
  };

  resetState = () => {
    this.setState({
      notificationTime: moment(),
      notificationTitle: "",
      notificationDescription: "",
    });
  };

  onChangeDate = (formateDate) => {
    console.log("state date---->", formateDate);
    this.setState({
      isVisible: false,
      isDateSection:true,
      notificationTime: moment(formateDate),
      notificationTime2: moment(formateDate),
    });

    var fomate = moment(formateDate).format("MMMM, Do YYYY");

    this.state.date.date = fomate;
    this.setState({
      isVisible: false,
      date: this.state.date,
    });
  };
  handleValueChange = (value, name) => {
    this.setState({
      [name]: value,
    });
  };

  onChangeDateArray = (formateDate, index) => {
    var datemoment = moment(formateDate).format("MMMM, Do YYYY");
    this.setState({ dateIndexOnly: index });
    this.setState({ dateNameOnly: formateDate });
    this.state.dateArray[index].date = datemoment;
    this.setState({
      isVisibleArray: false,
      dateArray: this.state.dateArray,
    });
  };

  changeDateLabelArray = (label, index) => {
    this.setState({ isDateArrayModelOpen: false });
    this.state.dateArray[index].label = label;
    this.setState({ dateArray: this.state.dateArray });
  };

  changeDateLabel = (label) => {
    this.setState({ isDateModelOpen: false });
    this.state.date.label = label;
    this.setState({ date: this.state.date });
  };
  handlePicker = (date) => {
    this.setState({ isVisible: false });
    console.log("A date has been picked: ", date);
  };
  hidePicker = () => {
    this.setState({ isVisible: false });
  };
  showDateTimePicker = () => {
    {
      this.state.status ? this.setState({ isVisible: true }) : null;
    }
  };
  showDateTimePickerArray = () => {
    {
      this.state.status ? this.setState({ isVisibleArray: true }) : null;
    }
  };
  removeDate = (key) => {
    const { dateArray } = this.state;
    dateArray.splice(key, 1);
    this.setState({
      deleteDateArray: dateArray,
    });
  };

  dateLeftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeDate}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };

  renderDate() {
    const { notificationTime} = this.state;

    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={calender} style={styles.innerStyle} />
          </View>

          <View>
            <TouchableOpacity
              style={[styles.filedView, { alignItems: "center",position:"relative" }]}
              onPress={this.showDateTimePicker}
            >
              {this.state.isVisible == false && this.state.date.date == "" ? (
                <Text style={styles.dateText}>Date</Text>
              ) : null}
              {this.state.isDateSection == true ? (
                   <TouchableOpacity style={{ flexDirection: "column" }}>
                     <Text  style={[styles.Text_1, { fontSize: width * 0.02, width: width * 0.5 },]}>
                           Date
                    </Text>
                    <Text style={styles.dateText}>{this.state.date.date}</Text>
                   </TouchableOpacity>
              ) :  null }

              <DateTimePickerModal
                isVisible={this.state.isVisible}
                onConfirm={this.onChangeDate}
                onCancel={this.hidePicker}
                mode="datetime"
                is24Hour={false}
                date={new Date(notificationTime)}
                titleIOS="Pick your Notification time"
              />

              {this.state.status ? (
                <TouchableHighlight
                  underlayColor="transparent"
                  style={[
                    styles.addressRightView,
                    { marginTop: Metrics.smallMargin },
                  ]}
                  onPress={() => this.setState({ isDateModelOpen: true })}
                >
                  <Icon
                    style={styles.iconSize}
                    size={width * 0.06}
                    name="chevron-small-down"
                  />
                </TouchableHighlight>
              ) : null}

              {this.state.status && this.state.date.label !== "" ? (
                <View style={styles.addressRightView}>
                  <Text style={styles.addressRighttext}>
                    {this.state.date.label}
                  </Text>
                </View>
              ) : null}
            </TouchableOpacity>

            {this.state.dateSection == true &&
              this.state.dateArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.dateLeftAction}>
                    <View style={styles.filedView} key={key}>
                      <TouchableOpacity
                        onPress={this.showDateTimePickerArray}
                        style={{
                          justifyContent: "center",
                          width: width * 0.45,
                        }}
                      >
                        {this.state.isVisibleArray == false &&
                        this.state.dateArray[key].date == "" ? (
                          <View
                            style={{
                              justifyContent: "center",
                              height: height * 0.045,
                              marginTop: Metrics.doubleBaseMargin,
                            }}
                          >
                            <Text style={styles.dateText}>Date</Text>
                          </View>
                        ) : null}

                        <Text style={styles.dateText}>
                          {this.state.dateArray[key].date}
                        </Text>
                      </TouchableOpacity>
                      <DateTimePickerModal
                        isVisible={this.state.isVisibleArray}
                        onConfirm={(date) => this.onChangeDateArray(date, key)}
                        onCancel={this.hidePicker}
                      />

                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.addressRightView}
                        onPress={() =>
                          this.setState({ isDateArrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>

                      {this.state.dateArray[key].label !== "" ? (
                        <View style={styles.addressRightView}>
                          <Text style={styles.addressRighttext}>
                            {this.state.dateArray[key].label}
                          </Text>
                        </View>
                      ) : null}
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isDateArrayModelOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ isDateArrayModelOpen: false })
                        }
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>Date</Text>
                            <View style={{ flexDirection: "column" }}>
                              {this.state.dateLableList.map((item, index) => {
                                return (
                                  <TouchableHighlight
                                    underlayColor="transparent"
                                    onPress={() => {
                                      this.changeDateLabelArray(
                                        item.label,
                                        key
                                      );
                                    }}
                                  >
                                    <Text style={styles.labelName}>
                                      {" "}
                                      {item.label}{" "}
                                    </Text>
                                  </TouchableHighlight>
                                );
                              })}
                              <TouchableHighlight
                                underlayColor="transparent"
                                onPress={() =>
                                  this.setState({
                                    isAddDateArrayLabel: true,
                                    dateLabel: "",
                                  })
                                }
                              >
                                <Text style={styles.labelName}> Custom </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isAddDateArrayLabel}
                        transparent={true}
                        // key={key}
                        animationType="fade"
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Custom label name
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              <TextInput
                                placeholder="Custom label name"
                                style={styles.addLabelField}
                                placeholderTextColor={COLORS.main_text_color}
                                editable={this.state.status ? true : false}
                                keyboardType={"default"}
                                onChangeText={(label) => {
                                  this.changeDateLabelArray(label, key);
                                }}
                              />
                              <TouchableHighlight
                                underlayColor="transparent"
                                style={styles.saveView}
                                onPress={() =>
                                  this.state.addressLabel !== ""
                                    ? this.setState({
                                        isAddDateArrayLabel: false,
                                        isDateArrayModelOpen: false,
                                      })
                                    : this.setState({
                                        isAddDateArrayLabel: false,
                                      })
                                }
                              >
                                <Text
                                  style={{
                                    color: COLORS.main_text_color,
                                    fontFamily: Font.medium,
                                    fontSize: width * 0.04,
                                  }}
                                >
                                  {" "}
                                  Ok{" "}
                                </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addDate()}
              disable={this.state.disabledDate}
            >
              {this.state.status ? <NormalText> + Add Date </NormalText> : null}
            </TouchableOpacity>
            <Modal
              style={styles.footerModal}
              visible={this.state.isDateModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() => this.setState({ isDateModelOpen: false })}
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Date</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.dateLableList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeDateLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({ isAddDateLabel: true, dateLabel: "" })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddDateLabel}
              transparent={true}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      // value={this.state.emailLabel}
                      onChangeText={(label) => {
                        this.changeDateLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.dateLabel !== ""
                          ? this.setState({
                              isAddDateLabel: false,
                              isDateModelOpen: false,
                            })
                          : this.setState({ isAddDateLabel: false })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addNote = () => {
    if (this.state.note.note == "") {
      alert("Please Fill the Field");
    }
    if (this.state.note.note !== "") {
      if (this.state.noteCounter == 0) {
        this.setState({
          noteCounter: this.state.noteCounter + 1,
          noteSection: true,
          noteArray: [...this.state.noteArray, { note: "", label: "" }],
        });
      }
    }
    if (this.state.noteSection == true) {
      if (this.state.noteIndexOnly == this.state.noteCounter - 1) {
        if (this.state.noteNameOnly !== "") {
          this.setState({
            noteCounter: this.state.noteCounter + 1,
            noteSection: true,
            noteArray: [...this.state.noteArray, { note: "", label: "" }],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }
  };

  onChangeNote = (value) => {
    this.state.note.note = value;
    this.setState({ note: this.state.note });
  };

  onChangeNoteArray = (value, index) => {
    this.setState({ noteIndexOnly: index });
    this.setState({ noteNameOnly: value });
    this.state.noteArray[index].note = value;
    this.setState({ noteArray: this.state.noteArray });
  };

  changeNoteLabelArray = (label, index) => {
    this.setState({ isNoteArrayModelOpen: false });
    this.state.noteArray[index].label = label;
    this.setState({ NoteArray: this.state.noteArray });
  };

  changeNoteLabel = (label) => {
    this.setState({ isNoteModelOpen: false });
    this.state.note.label = label;
    this.setState({ Note: this.state.note });
  };

  removeNote = (key) => {
    const { noteArray } = this.state;
    noteArray.splice(key, 1);
    this.setState({
      deleteNoteArray: noteArray,
    });
  };

  noteLeftAction = (key) => {
    return (
      <TouchableOpacity
        onPress={this.removeNote}
        style={{ justifyContent: "center", alignItems: "center" }}
      >
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  renderNote() {
    return (
      <View style={{ marginTop: Metrics.doubleBaseMargin }}>
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={note} style={styles.innerStyle} />
          </View>

          <View>

            {this.state.status ? (
              this.state.isNoteSection == true ? (
                <View style={styles.addressFieldContainer}>
                <TouchableOpacity style={{ flexDirection: "column" }}>
                  <Text
                    style={[
                      styles.Text_1,
                      { fontSize: width * 0.02, width: width * 0.5 },
                    ]}
                  >
                    Note
                  </Text>
              <TextInput
                placeholder="Note"
                style={styles.addressField}
                placeholderTextColor={COLORS.main_text_color}
                multiline={true}
                numberOfLines={5}
                //value={this.state.note1}
                editable={this.state.status ? true : false}
                onChangeText={(value) => this.onChangeNote(value)}
              />
               </TouchableOpacity>
               </View>
                ) : (
                  <TouchableOpacity
                    onPress={() => {
                      this.setState({ isNoteSection : true });
                    }}
                    style={styles.filedView}
                  >
                    <Text
                      style={[
                        styles.Text_1,
                        { fontSize: width * 0.03, width: width * 0.5 },
                      ]}
                    >
                      Note
                    </Text>
                  </TouchableOpacity>
                )
              ) : (
                <TouchableOpacity  style={styles.filedView}>
                  <Text style={[styles.Text_1, { fontSize: width * 0.03 }]}>
                    Note
                  </Text>
                </TouchableOpacity>
              )}

            {this.state.noteSection == true &&
              this.state.noteArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.noteLeftAction}>
                    <View style={styles.addressFieldContainer} key={key}>
                      <TextInput
                        placeholder="Note"
                        style={styles.addressField}
                        placeholderTextColor={COLORS.main_text_color}
                        multiline={true}
                        numberOfLines={5}
                        key={key}
                        keyboardType={"default"}
                        onChangeText={(note) => {
                          this.onChangeNoteArray(note, key);
                        }}
                      />
                      <TouchableHighlight
                        underlayColor="transparent"
                        style={styles.rightView}
                        // key={key}
                        onPress={() =>
                          this.setState({ isNoteArrayModelOpen: true })
                        }
                      >
                        <Icon
                          style={styles.iconSize}
                          size={width * 0.06}
                          name="chevron-small-down"
                        />
                      </TouchableHighlight>
                      {this.state.noteArray[key].label !== "" ? (
                        <View style={styles.rightView}>
                          <Text style={styles.righttext}>
                            {this.state.noteArray[key].label}
                          </Text>
                        </View>
                      ) : null}

                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isNoteArrayModelOpen}
                        transparent={true}
                        animationType="fade"
                        // key={key}
                        onRequestClose={() =>
                          this.setState({ isNoteArrayModelOpen: false })
                        }
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>Note</Text>
                            <View style={{ flexDirection: "column" }}>
                              {this.state.noteLabelList.map((item, index) => {
                                return (
                                  <TouchableHighlight
                                    underlayColor="transparent"
                                    onPress={() => {
                                      this.changeNoteLabelArray(
                                        item.label,
                                        key
                                      );
                                    }}
                                  >
                                    <Text style={styles.labelName}>
                                      {" "}
                                      {item.label}{" "}
                                    </Text>
                                  </TouchableHighlight>
                                );
                              })}
                              <TouchableHighlight
                                underlayColor="transparent"
                                onPress={() =>
                                  this.setState({
                                    isAddNoteArrayLabel: true,
                                    noteLabel: "",
                                  })
                                }
                              >
                                <Text style={styles.labelName}> Custom </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>

                      <Modal
                        style={styles.footerModal}
                        visible={this.state.isAddNoteArrayLabel}
                        transparent={true}
                        // key={key}
                        animationType="fade"
                      >
                        <View style={styles.contactContent}>
                          <View style={styles.content}>
                            <Text style={styles.modalHeader}>
                              Custom label name
                            </Text>
                            <View style={{ flexDirection: "column" }}>
                              <TextInput
                                placeholder="Custom label name"
                                style={styles.addLabelField}
                                placeholderTextColor={COLORS.main_text_color}
                                editable={this.state.status ? true : false}
                                keyboardType={"default"}
                                onChangeText={(label) => {
                                  this.changeNoteLabelArray(label, key);
                                }}
                              />
                              <TouchableHighlight
                                underlayColor="transparent"
                                style={styles.saveView}
                                onPress={() =>
                                  this.state.noteLabel !== ""
                                    ? this.setState({
                                        isAddNoteArrayLabel: false,
                                        isNoteArrayModelOpen: false,
                                      })
                                    : this.setState({
                                        isAddNoteArrayLabel: false,
                                      })
                                }
                              >
                                <Text
                                  style={{
                                    color: COLORS.main_text_color,
                                    fontFamily: Font.medium,
                                    fontSize: width * 0.04,
                                  }}
                                >
                                  {" "}
                                  Ok{" "}
                                </Text>
                              </TouchableHighlight>
                            </View>
                          </View>
                        </View>
                      </Modal>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addNote()}
              disable={this.state.disabledNote}
            >
              {this.state.status ? <NormalText> + Add Note </NormalText> : null}
            </TouchableOpacity>
            <Modal
              style={styles.footerModal}
              visible={this.state.isNoteModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() => this.setState({ isNoteModelOpen: false })}
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Note</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.noteLabelList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeNoteLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({ isAddNoteLabel: true, noteLabel: "" })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddNoteLabel}
              transparent={true}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      // value={this.state.emailLabel}
                      onChangeText={(label) => {
                        this.changeNoteLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.noteLabel !== ""
                          ? this.setState({
                              isAddNoteLabel: false,
                              isNoteModelOpen: false,
                            })
                          : this.setState({ isAddNoteLabel: false })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        Ok
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }
  addCompany = () => {
    if (this.state.company.company == "") {
      alert("Please Fill the Field");
    }
    if (this.state.company.company !== "") {
      if (this.state.companyCounter == 0) {
        this.setState({
          companyCounter: this.state.companyCounter + 1,
          companySection: true,
          companyArray: [
            ...this.state.companyArray,
            { company: "", label: "", time: "", timeto: "" },
          ],
        });
      }
    }
    if (this.state.companySection == true) {
      if (this.state.companyIndexOnly == this.state.companyCounter - 1) {
        if (this.state.companyNameOnly !== "") {
          this.setState({
            companyCounter: this.state.companyCounter + 1,
            companySection: true,
            companyArray: [
              ...this.state.companyArray,
              { company: "", label: "", time: "", timeto: "" },
            ],
          });
        } else {
          alert("Please Fill the Field");
        }
      } else {
        alert("Please Fill the Field");
      }
    }

  };

  onChangeCompany = (value) => {
    console.log("Comapny-------->", value);
    this.state.company.company = value;
    this.setState({ company: this.state.company });
  };

  onChangeCompanyArray = (value, index) => {
    this.setState({ companyIndexOnly: index });
    this.setState({ companyNameOnly: value });
    this.state.companyArray[index].company = value;
    this.setState({ companyArray: this.state.companyArray });
  };

  changeCompanyLabelArray = (label, index) => {
    this.setState({ isCompanyArrayModelOpen: false });
    this.state.companyArray[index].label = label;
    this.setState({ CompanyArray: this.state.companyArray });
  };

  changeCompanyLabel = (label) => {
    this.setState({ isCompanyModelOpen: false });
    this.state.company.label = label;
    this.setState({ company: this.state.company });
  };

  //Job Title
  onChangeJobTitle = (value) => {
    this.state.jobTitle.jobTitle = value;
    this.setState({ job_title: this.state.jobTitle });
  };
  changeJobTitleLabel = (label) => {
    this.setState({ isJobTitleModelOpen: false });
    this.state.jobTitle.label = label;
    this.setState({ Job_title: this.state.jobTitle });
  };

  changeJobTitleLabelArray = (label, index) => {
    this.setState({ isjobTitleArrayModelOpen: false });
    this.state.jobTitleArray[index].label = label;
    this.setState({ JobTitleArray: this.state.jobTitleArray });
  };
  onChangeWorkHours = (value, index) => {
    this.state.workHours.workHours = value;
    this.setState({ work_hour: this.state.workHours });
  };

  changeWorkHoursLabel = (label) => {
    this.setState({ isWorkHourseModelOpen: false });
    this.state.workHours.label = label;
    this.setState({ workHours: this.state.workHours });
  };

  changeJobTitleLabelArray = (label, index) => {
    this.setState({ isjobTitleArrayModelOpen: false });
    this.state.jobTitleArray[index].label = label;
    this.setState({ JobTitleArray: this.state.jobTitleArray });
  };

  removeCompany = (key) => {
    const { companyArray } = this.state;
    companyArray.splice(key, 1);
    this.setState({
      deleteCompanyArray: companyArray,
    });
  };

  onChangeWorkHoursTo = (value) => {
    this.setState({
      isVisibleWorkTo: false,
      choosenWorkTo: moment(value).format("LTS"),
    });
  };

  //for array

  CompanyLeftAction = (key) => {
    return (
      <TouchableOpacity onPress={this.removeCompany}>
        <View style={styles.deleteBox}>
          <Text style={styles.deleteText}>Delete</Text>
        </View>
      </TouchableOpacity>
    );
  };
  itemSelect = (item) =>{
    this.setState({ selectItem : item , workViewOpen: false })
   }
 renderItem2 ({ item, index }) {
    return (
       <TouchableOpacity style={{marginTop:10,marginLeft:5}} onPress={() => {this.itemSelect(item)}}>
         <Text style={[styles.workText, { fontSize: width * 0.026 }]}>{item}</Text>
       </TouchableOpacity>
   )}

onChangeMonday = (value) => {
    this.state.work_hour.monday.first = value ;
    this.setState({work_hour : this.state.work_hour })
    console.log("this.state.work_hour.monday.first--->",this.state.work_hour.monday.first)
}

onChangeMondayTo = (value) => {
  this.state.work_hour.monday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeTuesday = (value) => {
    this.state.work_hour.tuesday.first = value ;
    this.setState({work_hour : this.state.work_hour })
}
onChangeTuesdayTo = (value) => {
  this.state.work_hour.tuesday.to  = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeWednesday = (value) => {
  this.state.work_hour.wednesday.first = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeWednesdayTo = (value) => {
  this.state.work_hour.wednesday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeThursday = (value) => {
  this.state.work_hour.thursday.first = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeThursdayTo = (value) => {
  this.state.work_hour.thursday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeFriday = (value) => {
  this.state.work_hour.friday.first = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeFridayTo = (value) => {
  this.state.work_hour.friday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeSaturday = (value) => {
  this.state.work_hour.saturday.first = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeSaturdayTo = (value) => {
  this.state.work_hour.saturday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}
onChangeSunday = (value) => {
  this.state.work_hour.sunday.first = value ;
  this.setState({work_hour : this.state.work_hour })
}
 onChangeSundayTo = (value) => {
  this.state.work_hour.sunday.to = value ;
  this.setState({work_hour : this.state.work_hour })
}

//arrayy
onChangeMondayArray = (value,index) => {
  this.state.work_hourArray[index].monday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
  console.log("array---->", this.state.work_hourArray)
}
onChangeMondayToArray = (value) => {
  this.state.work_hourArray[index].monday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeTuesdayArray = (value) => {
    this.state.work_hourArray[index].tuesday.first = value ;
    this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeTuesdayToArray = (value) => {
  this.state.work_hourArray[index].tuesday.to  = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeWednesdayArray = (value) => {
  this.state.work_hourArray[index].wednesday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeWednesdayToArray = (value) => {
  this.state.work_hourArray[index].wednesday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeThursdayArray = (value) => {
  this.state.work_hourArray[index].thursday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeThursdayToArray = (value) => {
  this.state.work_hourArray[index].thursday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeFridayArray = (value) => {
  this.state.work_hourArray[index].friday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeFridayToArray = (value) => {
  this.state.work_hourArray[index].friday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeSaturdayArray = (value) => {
  this.state.work_hourArray[index].saturday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeSaturdayToArray = (value) => {
  this.state.work_hourArray[index].saturday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
onChangeSundayArray = (value) => {
  this.state.work_hourArray[index].sunday.first = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}
 onChangeSundayToArray = (value) => {
  this.state.work_hourArray[index].sunday.to = value ;
  this.setState({work_hourArray : this.state.work_hourArray })
}

  renderCompany() {
    return (
      <View
        style={{
          marginTop: Metrics.baseMargin,
          marginBottom: Metrics.baseMargin,
        }}
      >
        <View style={{ flexDirection: "row" }}>
          <View>
            <Image source={handshake} style={styles.innerStyle} />
          </View>

          <View>
            <View style={styles.filedView}>
              <TouchableOpacity style={{ flexDirection: "row" }}>
                <View>
                  <TextInput
                    placeholder=""
                    style={styles.stylefiledText}
                    placeholderTextColor={COLORS.main_text_color}
                    //value={this.state.company1}
                    editable={this.state.status ? true : false}
                    onChangeText={(value) => this.onChangeCompany(value)}
                  />
                </View>
                <View style={styles.addressRightView}>
                  <Text style={styles.compnyRightText}>Company</Text>
                </View>
              </TouchableOpacity>
            </View>
            <View style={styles.filedView}>
            <TouchableOpacity style={{ flexDirection: "row" }}>
                <View>
              <TextInput
                placeholder=""
                style={styles.stylefiledText}
                placeholderTextColor={COLORS.main_text_color}
                value={this.state.job_title}
                editable={this.state.status ? true : false}
                onChangeText={(value) => this.onChangeJobTitle(value)}
              />
                </View>
                <View style={styles.addressRightView}>
                  <Text style={styles.compnyRightText}>Job Title</Text>
                </View>
              </TouchableOpacity>
            </View>
            {this.state.isCompanySec == true ?
              <View style={{ flexDirection: "row", marginTop: Metrics.baseMargin }}>

              <View style={styles.workView}>
                <View style={styles.LeftView}>
                  <Image source={checked} style={styles.checkedIcon} />
                  <View style={{ flexDirection: "row", alignItems: "center" }}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Monday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.monday.first}
                        onChangeText={(value) => this.onChangeMonday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.monday.to}
                        onChangeText={(value) => this.onChangeMondayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Tuesday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.tuesday.first}
                        onChangeText={(value) => this.onChangeTuesday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.tuesday.to}
                        onChangeText={(value) => this.onChangeTuesdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Wednesday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.wednesday.first}
                        onChangeText={(value) => this.onChangeWednesday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.wednesday.to}
                        onChangeText={(value) => this.onChangeWednesdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Thursday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.thursday.first}
                        onChangeText={(value) => this.onChangeThursday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.thursday.to}
                        onChangeText={(value) => this.onChangeThursdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Friday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                       // value={this.state.work_hour.friday.first}
                        onChangeText={(value) => this.onChangeFriday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                       // value={this.state.work_hour.friday.to}
                        onChangeText={(value) => this.onChangeFridayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Saturday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.saturday.first}
                        onChangeText={(value) => this.onChangeSaturday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.saturday.to}
                        onChangeText={(value) => this.onChangeSaturdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Sunday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        //value={this.state.work_hour.sunday.first}
                        onChangeText={(value) => this.onChangeSunday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                       // value={this.state.work_hour.sunday.to}
                        onChangeText={(value) => this.onChangeSundayTo(value)}

                      />
                    </View>
                  </View>
                </View>

                <View style={styles.rightView}>
                  <View style={{ flexDirection: "column" }}>
                    <Text
                      style={[
                        styles.workText,
                        {
                          fontSize: width * 0.026,
                          marginRight: 5,
                          textAlign: "right",
                        },
                      ]}
                    >
                      Work Hours
                    </Text>
                    <TouchableOpacity
                      onPress={() => this.setState({ workViewOpen: true })}
                      style={styles.selectTimezone}
                    >
                      {this.state.selectItem == "" ? (
                        <Text
                          style={[styles.workText, { fontSize: width * 0.018 }]}
                        >
                          Select Time Zone
                        </Text>
                      ) : (
                        <Text
                          style={[styles.workText, { fontSize: width * 0.018 ,textAlign:'center'}]}
                        >
                          {this.state.selectItem}
                        </Text>
                      )}

                      <Modal
                        style={styles.workModal}
                        visible={this.state.workViewOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ workViewOpen : false })
                        }
                      >
                        <View style={styles.workModalView}>
                          <View style={styles.content}>
                            <FlatList
                              refreshing={true}
                              keyExtractor={(item, index) => index.toString()}
                              data={this.state.tzs}
                              extraData={this.state}
                              numColumns={1}
                              renderItem={this.renderItem2.bind(this)}
                            />
                          </View>
                        </View>
                      </Modal>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            </View>
            :
      <TouchableOpacity style={styles.filedView} onPress={() => {this.setState({isCompanySec : true})}}>
             <View
                  style={{
                   marginLeft:Metrics.smallMargin
                  }}
                >
                  <TouchableHighlight
                    underlayColor="transparent"
                    style={[styles.rightViewBorder]}
                    onPress={() => {this.setState({isCompanySec : true})}}
                  >
                    <View >

                        <Text style={{ fontFamily: Font.regular,fontSize: width * 0.03,color: COLORS.main_text_color,}}>
                         Add Hours
                        </Text>

                    </View>
                  </TouchableHighlight>
                </View>
                <View style={styles.addressRightView}>
                  <Text style={styles.compnyRightText}>Work Hours</Text>
                </View>
            </TouchableOpacity>
            }

            {this.state.companySection == true &&
              this.state.companyArray.map((input, key) => {
                return (
                  <Swipeable renderLeftActions={this.CompanyLeftAction}>
                    <View key={key}>
                      <View style={styles.filedView}>
                        <TextInput
                          placeholder="Company"
                          style={styles.addressField}
                          placeholderTextColor={COLORS.main_text_color}
                          key={key}
                          keyboardType={"default"}
                          onChangeText={(company) => {
                            this.onChangeCompanyArray(company, key);
                          }}
                        />

                        {this.state.companyArray[key].label !== "" ? (
                          <View style={styles.addressRightView}>
                            <Text style={styles.addressRighttext}>
                              {this.state.companyArray[key].label}
                            </Text>
                          </View>
                        ) : null}

                        <Modal
                          style={styles.footerModal}
                          visible={this.state.isCompanyArrayModelOpen}
                          transparent={true}
                          animationType="fade"
                          onRequestClose={() =>
                            this.setState({ isCompanyArrayModelOpen: false })
                          }
                        >
                          <View style={styles.contactContent}>
                            <View style={styles.content}>
                              <Text style={styles.modalHeader}>Company</Text>
                              <View style={{ flexDirection: "column" }}>
                                {this.state.companyLableList.map(
                                  (item, index) => {
                                    return (
                                      <TouchableHighlight
                                        underlayColor="transparent"
                                        onPress={() => {
                                          this.changeCompanyLabelArray(
                                            item.label,
                                            key
                                          );
                                        }}
                                      >
                                        <Text style={styles.labelName}>
                                          {" "}
                                          {item.label}{" "}
                                        </Text>
                                      </TouchableHighlight>
                                    );
                                  }
                                )}
                                <TouchableHighlight
                                  underlayColor="transparent"
                                  onPress={() =>
                                    this.setState({
                                      isAddCompanyArrayLabel: true,
                                      company: "",
                                    })
                                  }
                                >
                                  <Text style={styles.labelName}> Custom </Text>
                                </TouchableHighlight>
                              </View>
                            </View>
                          </View>
                        </Modal>
                        <Modal
                          style={styles.footerModal}
                          visible={this.state.isAddCompanyArrayLabel}
                          transparent={true}
                          // key={key}
                          animationType="fade"
                        >
                          <View style={styles.contactContent}>
                            <View style={styles.content}>
                              <Text style={styles.modalHeader}>
                                Custom label name
                              </Text>
                              <View style={{ flexDirection: "column" }}>
                                <TextInput
                                  placeholder="Custom label name"
                                  style={styles.addLabelField}
                                  placeholderTextColor={COLORS.main_text_color}
                                  editable={this.state.status ? true : false}
                                  keyboardType={"default"}
                                  onChangeText={(label) => {
                                    this.changeCompanyLabelArray(label, key);
                                  }}
                                />
                                <TouchableHighlight
                                  underlayColor="transparent"
                                  style={styles.saveView}
                                  onPress={() =>
                                    this.state.companyLabel !== ""
                                      ? this.setState({
                                          isAddCompanyArrayLabel: false,
                                          isCompanyArrayModelOpen: false,
                                        })
                                      : this.setState({
                                          isAddCompanyArrayLabel: false,
                                        })
                                  }
                                >
                                  <Text
                                    style={{
                                      color: COLORS.main_text_color,
                                      fontFamily: Font.medium,
                                      fontSize: width * 0.04,
                                    }}
                                  >
                                    Ok
                                  </Text>
                                </TouchableHighlight>
                              </View>
                            </View>
                          </View>
                        </Modal>
                      </View>
                      {/* Job Title" */}
                      <View style={styles.filedView}>
                        <TextInput
                          placeholder="Job Title"
                          style={styles.stylefiledText}
                          placeholderTextColor={COLORS.main_text_color}
                          value={this.state.job_title}
                          editable={this.state.status ? true : false}
                          onChangeText={(value) => this.onChangeJobTitle(value)}
                        />
                      </View>
                      {/* Job Title finish */}
                      <View style={{ flexDirection: "row", marginTop: Metrics.baseMargin }}>

              <View style={styles.workView}>
                <View style={styles.LeftView}>
                  <Image source={checked} style={styles.checkedIcon} />
                  <View style={{ flexDirection: "row", alignItems: "center" }}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Monday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.monday.first}
                        onChangeText={(value) => this.onChangeMondayArray(value,key)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.monday.to}
                        onChangeText={(value) => this.onChangeMondayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Tuesday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.tuesday.first}
                        onChangeText={(value) => this.onChangeTuesday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.tuesday.to}
                        onChangeText={(value) => this.onChangeTuesdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Wednesday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.wednesday.first}
                        onChangeText={(value) => this.onChangeWednesday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.wednesday.to}
                        onChangeText={(value) => this.onChangeWednesdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Thursday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.thursday.first}
                        onChangeText={(value) => this.onChangeThursday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.thursday.to}
                        onChangeText={(value) => this.onChangeThursdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Friday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="7:00AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.friday.first}
                        onChangeText={(value) => this.onChangeFriday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="3:30AM"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.friday.to}
                        onChangeText={(value) => this.onChangeFridayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Saturday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.saturday.first}
                        onChangeText={(value) => this.onChangeSaturday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.saturday.to}
                        onChangeText={(value) => this.onChangeSaturdayTo(value)}

                      />
                    </View>
                  </View>
                  <View style={styles.dayView}>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.025, width: width * 0.16 },
                      ]}
                    >
                      Sunday
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.sunday.first}
                        onChangeText={(value) => this.onChangeSunday(value)}

                      />
                    </View>
                    <Text
                      style={[
                        styles.workText,
                        { fontSize: width * 0.035, marginLeft: 5 },
                      ]}
                    >
                      to
                    </Text>
                    <View style={styles.timeView}>
                      <TextInput
                        placeholder="OFF"
                        placeholderTextColor={COLORS.main_text_color}
                        style={styles.timeText}
                        value={this.state.work_hour.sunday.to}
                        onChangeText={(value) => this.onChangeSundayTo(value)}

                      />
                    </View>
                  </View>
                </View>

                <View style={styles.rightView}>
                  <View style={{ flexDirection: "column" }}>
                    <Text
                      style={[
                        styles.workText,
                        {
                          fontSize: width * 0.026,
                          marginRight: 5,
                          textAlign: "right",
                        },
                      ]}
                    >
                      Work Hours
                    </Text>
                    <TouchableOpacity
                      onPress={() => this.setState({ workViewOpen: true })}
                      style={styles.selectTimezone}
                    >
                      {this.state.selectItem == "" ? (
                        <Text
                          style={[styles.workText, { fontSize: width * 0.018 }]}
                        >
                          Select Time Zone
                        </Text>
                      ) : (
                        <Text
                          style={[styles.workText, { fontSize: width * 0.018 ,textAlign:'center'}]}
                        >
                          {this.state.selectItem}
                        </Text>
                      )}

                      <Modal
                        style={styles.workModal}
                        visible={this.state.workViewOpen}
                        transparent={true}
                        animationType="fade"
                        onRequestClose={() =>
                          this.setState({ workViewOpen : false })
                        }
                      >
                        <View style={styles.workModalView}>
                          <View style={styles.content}>
                            <FlatList
                              refreshing={true}
                              keyExtractor={(item, index) => index.toString()}
                              data={this.state.tzs}
                              extraData={this.state}
                              numColumns={1}
                              renderItem={this.renderItem.bind(this)}
                            />
                          </View>
                        </View>
                      </Modal>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            </View>
                    </View>
                  </Swipeable>
                );
              })}

            <TouchableOpacity
              onPress={() => this.addCompany()}
              disable={this.state.disabledCompany}
            >
              {this.state.status ? <NormalText> +  Add Company </NormalText> : null}
            </TouchableOpacity>

            <Modal
              style={styles.footerModal}
              visible={this.state.isCompanyModelOpen}
              transparent={true}
              animationType="fade"
              onRequestClose={() =>
                this.setState({ isCompanyModelOpen: false })
              }
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Company</Text>
                  <View style={{ flexDirection: "column" }}>
                    {this.state.companyLableList.map((item, index) => {
                      return (
                        <TouchableHighlight
                          underlayColor="transparent"
                          onPress={() => {
                            this.changeCompanyLabel(item.label);
                          }}
                        >
                          <Text style={styles.labelName}> {item.label} </Text>
                        </TouchableHighlight>
                      );
                    })}
                    <TouchableHighlight
                      underlayColor="transparent"
                      onPress={() =>
                        this.setState({
                          isAddCompanyLabel: true,
                          company: "",
                        })
                      }
                    >
                      <Text style={styles.labelName}> Custom </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
            <Modal
              style={styles.footerModal}
              visible={this.state.isAddCompanyLabel}
              transparent={true}
              // key={key}
              animationType="fade"
            >
              <View style={styles.contactContent}>
                <View style={styles.content}>
                  <Text style={styles.modalHeader}>Custom label name</Text>
                  <View style={{ flexDirection: "column" }}>
                    <TextInput
                      placeholder="Custom label name"
                      style={styles.addLabelField}
                      placeholderTextColor={COLORS.main_text_color}
                      editable={this.state.status ? true : false}
                      keyboardType={"default"}
                      onChangeText={(label) => {
                        this.changeCompanyLabel(label);
                      }}
                    />
                    <TouchableHighlight
                      underlayColor="transparent"
                      style={styles.saveView}
                      onPress={() =>
                        this.state.companyLabel !== ""
                          ? this.setState({
                              isAddCompanyLabel: false,
                              isCompanyModelOpen: false,
                            })
                          : this.setState({
                              isAddCompanyLabel: false,
                            })
                      }
                    >
                      <Text
                        style={{
                          color: COLORS.main_text_color,
                          fontFamily: Font.medium,
                          fontSize: width * 0.04,
                        }}
                      >
                        {" "}
                        Ok{" "}
                      </Text>
                    </TouchableHighlight>
                  </View>
                </View>
              </View>
            </Modal>
          </View>
        </View>
      </View>
    );
  }

  find_dimesions(event){
    const { width, height ,x,y} = event.nativeEvent.layout;
    console.log("ON LAYOUT");
    this.setState({width, height,x,y})

    // console.log("satet",event.nativeEvent.layout.height);
    // this.setState({
    //   modalX: event.nativeEvent.layout.x,
    //   modalY: event.nativeEvent.layout.y,
    //   modalWidth: event.nativeEvent.layout.width,
    //   modalHeight: event.nativeEvent.layout.height
    // })
    // const {x, y, width, height} = layout;
    console.log("xxx",x);
    console.log("yeee",y);
    console.log("widhth",width);
    console.log("height",height);
    //   const newLayout = {
    //     height: height ,
    //     width: width,
    //     left: x,
    //     top: y,
    //   };

    // this.setState({ modalX : newLayout })
    // this.setState({ modalY : y })
    // this.setState({ modalWidth : width })
    // this.setState({ modalHeight : height })

   // console.log("model x---->",this.state.width);
    // console.log("satet",this.state.modalWidth);
    // console.log("satet",this.state.modalHeight);
  }
  renderModal(){
    return(
      <TouchableOpacity onLayout={(event) => { this.find_dimesions(event) }} onPress={() =>{this.setState({exaModalOpen : true})}}>
         <Text  style={styles.addLabelField}>Welcome to react native</Text>
         {this.renderPage(this.state.width,this.state.height,this.state.x,this.state.y)}
     </TouchableOpacity>
    )
  }
  renderPage =(width,height,x,y) =>{
    console.log("height=-->",y)
    return (
      <Modal
      style={{height:height,width:width,margin: 0,top:y}}
        visible={this.state.exaModalOpen}
        transparent={true}
        animationType="fade"
        onRequestClose={() => this.setState({ exaModalOpen: false })}
      >
        <View style={{height:height,width:width,margin: 0,top:15}}>

        {/* </View>
        <View style={styles.contactContent}> */}
          <View style={styles.content}>
            <Text>hiii</Text>
          </View>
        </View>
      </Modal>
      //  <TouchableOpacity style={{position:"relative",height:250,width:200,backgroundColor:COLORS.main_text_color}} onPress={() =>{this.setState({exaModalOpen : true})}}>
      //                   <View>
      //                     <Modal
      //                      style={{position:"absolute", opacity: 0.5,}}
      //                      visible={this.state.exaModalOpen}
      //                      transparent={true}
      //                      animationType="fade"
      //                      onRequestClose={() =>
      //                        this.setState({ exaModalOpen: false })
      //                      }>
      //                         <View style={styles.contactContent}>
      //                         <View style={styles.content}>
      //                           <Text>hiii</Text>
      //                           </View>
      //                            </View>
      //                     </Modal>

      //                   </View>
      //           </TouchableOpacity>
    );
  }
  render() {
    return (
      <ThemeProvider theme={this.props.theme}>
        <GeneralStatusBar
          backgroundColor={
            this.props.theme.mode === "light" ? "white" : "black"
          }
          barStyle={
            this.props.theme.mode === "dark" ? "light-content" : "dark-content"
          }
        />
        <View style={styles.container}>
          <Container>

            {this.renderHeader()}
            <ScrollView  nestedScrollEnabled={true}>
              {this.renderMiddle()}
              {this.renderName()}
              {this.renderMobile()}
              {this.renderEmail()}
              {this.renderAddress()}
              {this.renderMessage()}
              {this.renderSocialmedia()}
              {this.renderWebsite()}
              {this.renderDate()}
              {this.renderNote()}
              {this.renderCompany()}
              {this.renderModal()}
              {/* <TouchableOpacity style={{position:"relative",height:250,width:200,backgroundColor:COLORS.main_text_color}} onPress={() =>{this.setState({exaModalOpen : true})}}>
                      <View onLayout={(event) => { this.find_dimesions(event.nativeEvent.layout) }}>
                        <Modal
                         style={{position:"absolute", opacity: 0.5,}}
                         visible={this.state.exaModalOpen}
                         transparent={true}
                         animationType="fade"
                         onRequestClose={() =>
                           this.setState({ exaModalOpen: false })
                         }>
                            <View style={styles.contactContent}>
                            <View style={styles.content}>
                              <Text>hiii</Text>
                              </View>
                               </View>
                        </Modal>

                      </View>
              </TouchableOpacity> */}

              <Toast
                ref="toast"
                style={{
                  backgroundColor:
                    this.props.theme.mode === "light" ? "black" : "white",
                  width: width * 0.8,
                  alignItems: "center",
                }}
                position="bottom"
                positionValue={250}
                fadeInDuration={100}
                fadeOutDuration={2000}
                opacity={1}
                textStyle={{
                  color: this.props.theme.mode === "light" ? "white" : "black",
                  fontFamily: Font.medium,
                  fontSize: width * 0.04,
                }}
              />
            </ScrollView>
            <View
              style={{
                width: width * 0.9,
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "flex-end",
                flexDirection: "row",
              }}
            >
              <TouchableHighlight
                underlayColor="transparent"
                style={styles.saveView}
                onPress={this.ShowHideTextComponentView}
              >
                <Text
                  style={{
                    color: COLORS.main_text_color,
                    fontFamily: Font.medium,
                    fontSize: width * 0.04,
                  }}
                >
                  {this.state.status == true ? "Save" : "Edit"}
                </Text>
              </TouchableHighlight>
            </View>
            <Toast
              ref="toast"
              style={{
                backgroundColor:
                  this.props.theme.mode === "light" ? "black" : "white",
                width: width * 0.8,
                alignItems: "center",
              }}
              position="bottom"
              positionValue={100}
              fadeInDuration={1000}
              fadeOutDuration={1000}
              opacity={1}
              textStyle={{
                color: this.props.theme.mode === "light" ? "white" : "black",
                fontFamily: Font.medium,
                fontSize: width * 0.04,
              }}
            />
          </Container>
        </View>
      </ThemeProvider>
    );
  }
}

const mapStateToProps = (state) => ({
  theme: state.themeReducer.theme,
  username: state.login.shouldLoadData.username,
  dateChange: state.switchDateReducer.dateChange,
});

const mapDispatchToProps = (dispatch) => ({
  switchTheme: bindActionCreators(switchTheme, dispatch),
});

export default connect(mapStateToProps)(MyContactInfromation);

const Container = styled.SafeAreaView`
  flex: 1;

  width: 100%;
  align-items: center;
  background-color: ${(props) => props.theme.backColor};
`;
const NormalText = styled.Text`
  font-family: Roboto-Regular;
  font-size: 13px;
  color: ${(props) => props.theme.textColor};
`;
const BoldText = styled.Text`
  font-family: Roboto-Bold;
  font-size: 17px;
  color: ${(props) => props.theme.textColor};
`;
const ScrollView = styled.ScrollView`
  color: ${(props) => props.theme.textColor};
  flex: 1;
  width: 90%;
`;